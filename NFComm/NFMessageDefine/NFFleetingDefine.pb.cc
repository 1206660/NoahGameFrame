// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFFleetingDefine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NFFleetingDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NFFS {

namespace {

const ::google::protobuf::Descriptor* FSVector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FSVector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixTimeEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixTimeEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixTimeEvent_EventTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixTimeEvent_EventTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixTimeEvent_HitTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixTimeEvent_HitTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulletEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulletEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulletEvent_TacheBomp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulletEvent_TacheBomp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulletEvent_Bullet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulletEvent_Bullet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BulletEvent_EBEType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BulletEvent_EBE_BACKType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AudioEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioEvent_Audio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioEvent_Audio_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveEvent_Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveEvent_Move_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MoveEvent_METype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CameraEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraEvent_Camera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraEvent_Camera_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CameraEvent_CEType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EnableEvents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnableEvents_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnableEvents_Enable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnableEvents_Enable_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EnableEvents_EEETYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GlobalSpeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalSpeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalSpeed_Speed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalSpeed_Speed_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GlobalSpeed_EGSTYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_NFFleetingDefine_2eproto() {
  protobuf_AddDesc_NFFleetingDefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NFFleetingDefine.proto");
  GOOGLE_CHECK(file != NULL);
  FSVector3_descriptor_ = file->message_type(0);
  static const int FSVector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSVector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSVector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSVector3, z_),
  };
  FSVector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FSVector3_descriptor_,
      FSVector3::default_instance_,
      FSVector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSVector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSVector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FSVector3));
  FixTimeEvent_descriptor_ = file->message_type(1);
  static const int FixTimeEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixTimeEvent, hittrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixTimeEvent, eventtrigger_),
  };
  FixTimeEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixTimeEvent_descriptor_,
      FixTimeEvent::default_instance_,
      FixTimeEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixTimeEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixTimeEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixTimeEvent));
  FixTimeEvent_EventTrigger_descriptor_ = FixTimeEvent_descriptor_->nested_type(0);
  static const int FixTimeEvent_EventTrigger_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixTimeEvent_EventTrigger, eventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixTimeEvent_EventTrigger, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixTimeEvent_EventTrigger, prefab_),
  };
  FixTimeEvent_EventTrigger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixTimeEvent_EventTrigger_descriptor_,
      FixTimeEvent_EventTrigger::default_instance_,
      FixTimeEvent_EventTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixTimeEvent_EventTrigger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixTimeEvent_EventTrigger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixTimeEvent_EventTrigger));
  FixTimeEvent_HitTrigger_descriptor_ = FixTimeEvent_descriptor_->nested_type(1);
  static const int FixTimeEvent_HitTrigger_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixTimeEvent_HitTrigger, hittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixTimeEvent_HitTrigger, prefab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixTimeEvent_HitTrigger, backherodis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixTimeEvent_HitTrigger, backnpcdis_),
  };
  FixTimeEvent_HitTrigger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixTimeEvent_HitTrigger_descriptor_,
      FixTimeEvent_HitTrigger::default_instance_,
      FixTimeEvent_HitTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixTimeEvent_HitTrigger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixTimeEvent_HitTrigger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixTimeEvent_HitTrigger));
  BulletEvent_descriptor_ = file->message_type(2);
  static const int BulletEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent, bulletlist_),
  };
  BulletEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BulletEvent_descriptor_,
      BulletEvent::default_instance_,
      BulletEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BulletEvent));
  BulletEvent_TacheBomp_descriptor_ = BulletEvent_descriptor_->nested_type(0);
  static const int BulletEvent_TacheBomp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_TacheBomp, bomptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_TacheBomp, bomprang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_TacheBomp, bompprefabpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_TacheBomp, beattackparticle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_TacheBomp, backnpcdis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_TacheBomp, backherodis_),
  };
  BulletEvent_TacheBomp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BulletEvent_TacheBomp_descriptor_,
      BulletEvent_TacheBomp::default_instance_,
      BulletEvent_TacheBomp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_TacheBomp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_TacheBomp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BulletEvent_TacheBomp));
  BulletEvent_Bullet_descriptor_ = BulletEvent_descriptor_->nested_type(1);
  static const int BulletEvent_Bullet_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_Bullet, eventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_Bullet, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_Bullet, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_Bullet, maxdis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_Bullet, bulletrang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_Bullet, bulletbacktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_Bullet, backherodis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_Bullet, backnpcdis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_Bullet, tachedetroy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_Bullet, beattackparticle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_Bullet, fireoffest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_Bullet, bulletprefabpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_Bullet, bomp_),
  };
  BulletEvent_Bullet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BulletEvent_Bullet_descriptor_,
      BulletEvent_Bullet::default_instance_,
      BulletEvent_Bullet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_Bullet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletEvent_Bullet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BulletEvent_Bullet));
  BulletEvent_EBEType_descriptor_ = BulletEvent_descriptor_->enum_type(0);
  BulletEvent_EBE_BACKType_descriptor_ = BulletEvent_descriptor_->enum_type(1);
  AudioEvent_descriptor_ = file->message_type(3);
  static const int AudioEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioEvent, audiolist_),
  };
  AudioEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioEvent_descriptor_,
      AudioEvent::default_instance_,
      AudioEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioEvent));
  AudioEvent_Audio_descriptor_ = AudioEvent_descriptor_->nested_type(0);
  static const int AudioEvent_Audio_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioEvent_Audio, eventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioEvent_Audio, audioprefabname_),
  };
  AudioEvent_Audio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioEvent_Audio_descriptor_,
      AudioEvent_Audio::default_instance_,
      AudioEvent_Audio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioEvent_Audio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioEvent_Audio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioEvent_Audio));
  MoveEvent_descriptor_ = file->message_type(4);
  static const int MoveEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveEvent, moveevent_),
  };
  MoveEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveEvent_descriptor_,
      MoveEvent::default_instance_,
      MoveEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveEvent));
  MoveEvent_Move_descriptor_ = MoveEvent_descriptor_->nested_type(0);
  static const int MoveEvent_Move_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveEvent_Move, eventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveEvent_Move, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveEvent_Move, movedis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveEvent_Move, movetime_),
  };
  MoveEvent_Move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveEvent_Move_descriptor_,
      MoveEvent_Move::default_instance_,
      MoveEvent_Move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveEvent_Move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveEvent_Move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveEvent_Move));
  MoveEvent_METype_descriptor_ = MoveEvent_descriptor_->enum_type(0);
  CameraEvent_descriptor_ = file->message_type(5);
  static const int CameraEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraEvent, cameraeventlist_),
  };
  CameraEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraEvent_descriptor_,
      CameraEvent::default_instance_,
      CameraEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraEvent));
  CameraEvent_Camera_descriptor_ = CameraEvent_descriptor_->nested_type(0);
  static const int CameraEvent_Camera_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraEvent_Camera, eventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraEvent_Camera, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraEvent_Camera, amountparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraEvent_Camera, shaketime_),
  };
  CameraEvent_Camera_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraEvent_Camera_descriptor_,
      CameraEvent_Camera::default_instance_,
      CameraEvent_Camera_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraEvent_Camera, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraEvent_Camera, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraEvent_Camera));
  CameraEvent_CEType_descriptor_ = CameraEvent_descriptor_->enum_type(0);
  EnableEvents_descriptor_ = file->message_type(6);
  static const int EnableEvents_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableEvents, enablelist_),
  };
  EnableEvents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnableEvents_descriptor_,
      EnableEvents::default_instance_,
      EnableEvents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableEvents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableEvents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnableEvents));
  EnableEvents_Enable_descriptor_ = EnableEvents_descriptor_->nested_type(0);
  static const int EnableEvents_Enable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableEvents_Enable, eventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableEvents_Enable, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableEvents_Enable, targetname_),
  };
  EnableEvents_Enable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnableEvents_Enable_descriptor_,
      EnableEvents_Enable::default_instance_,
      EnableEvents_Enable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableEvents_Enable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableEvents_Enable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnableEvents_Enable));
  EnableEvents_EEETYPE_descriptor_ = EnableEvents_descriptor_->enum_type(0);
  GlobalSpeed_descriptor_ = file->message_type(7);
  static const int GlobalSpeed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSpeed, speedlist_),
  };
  GlobalSpeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalSpeed_descriptor_,
      GlobalSpeed::default_instance_,
      GlobalSpeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSpeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSpeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalSpeed));
  GlobalSpeed_Speed_descriptor_ = GlobalSpeed_descriptor_->nested_type(0);
  static const int GlobalSpeed_Speed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSpeed_Speed, eventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSpeed_Speed, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSpeed_Speed, speedvalue_),
  };
  GlobalSpeed_Speed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalSpeed_Speed_descriptor_,
      GlobalSpeed_Speed::default_instance_,
      GlobalSpeed_Speed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSpeed_Speed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSpeed_Speed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalSpeed_Speed));
  GlobalSpeed_EGSTYPE_descriptor_ = GlobalSpeed_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NFFleetingDefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FSVector3_descriptor_, &FSVector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixTimeEvent_descriptor_, &FixTimeEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixTimeEvent_EventTrigger_descriptor_, &FixTimeEvent_EventTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixTimeEvent_HitTrigger_descriptor_, &FixTimeEvent_HitTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BulletEvent_descriptor_, &BulletEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BulletEvent_TacheBomp_descriptor_, &BulletEvent_TacheBomp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BulletEvent_Bullet_descriptor_, &BulletEvent_Bullet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioEvent_descriptor_, &AudioEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioEvent_Audio_descriptor_, &AudioEvent_Audio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveEvent_descriptor_, &MoveEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveEvent_Move_descriptor_, &MoveEvent_Move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraEvent_descriptor_, &CameraEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraEvent_Camera_descriptor_, &CameraEvent_Camera::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnableEvents_descriptor_, &EnableEvents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnableEvents_Enable_descriptor_, &EnableEvents_Enable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalSpeed_descriptor_, &GlobalSpeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalSpeed_Speed_descriptor_, &GlobalSpeed_Speed::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NFFleetingDefine_2eproto() {
  delete FSVector3::default_instance_;
  delete FSVector3_reflection_;
  delete FixTimeEvent::default_instance_;
  delete FixTimeEvent_reflection_;
  delete FixTimeEvent_EventTrigger::default_instance_;
  delete FixTimeEvent_EventTrigger_reflection_;
  delete FixTimeEvent_HitTrigger::default_instance_;
  delete FixTimeEvent_HitTrigger_reflection_;
  delete BulletEvent::default_instance_;
  delete BulletEvent_reflection_;
  delete BulletEvent_TacheBomp::default_instance_;
  delete BulletEvent_TacheBomp_reflection_;
  delete BulletEvent_Bullet::default_instance_;
  delete BulletEvent_Bullet_reflection_;
  delete AudioEvent::default_instance_;
  delete AudioEvent_reflection_;
  delete AudioEvent_Audio::default_instance_;
  delete AudioEvent_Audio_reflection_;
  delete MoveEvent::default_instance_;
  delete MoveEvent_reflection_;
  delete MoveEvent_Move::default_instance_;
  delete MoveEvent_Move_reflection_;
  delete CameraEvent::default_instance_;
  delete CameraEvent_reflection_;
  delete CameraEvent_Camera::default_instance_;
  delete CameraEvent_Camera_reflection_;
  delete EnableEvents::default_instance_;
  delete EnableEvents_reflection_;
  delete EnableEvents_Enable::default_instance_;
  delete EnableEvents_Enable_reflection_;
  delete GlobalSpeed::default_instance_;
  delete GlobalSpeed_reflection_;
  delete GlobalSpeed_Speed::default_instance_;
  delete GlobalSpeed_Speed_reflection_;
}

void protobuf_AddDesc_NFFleetingDefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026NFFleetingDefine.proto\022\004NFFS\",\n\tFSVect"
    "or3\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"\237\002\n"
    "\014FixTimeEvent\0221\n\nhitTrigger\030\001 \003(\0132\035.NFFS"
    ".FixTimeEvent.HitTrigger\0225\n\014eventTrigger"
    "\030\005 \003(\0132\037.NFFS.FixTimeEvent.EventTrigger\032"
    "M\n\014EventTrigger\022\021\n\teventTime\030\001 \002(\002\022\032\n\001v\030"
    "\002 \002(\0132\017.NFFS.FSVector3\022\016\n\006prefab\030\003 \002(\t\032V"
    "\n\nHitTrigger\022\017\n\007hitTime\030\001 \002(\002\022\016\n\006prefab\030"
    "\002 \002(\t\022\023\n\013backHeroDis\030\003 \002(\002\022\022\n\nbackNpcDis"
    "\030\004 \002(\002\"\240\005\n\013BulletEvent\022,\n\nbulletList\030\001 \003"
    "(\0132\030.NFFS.BulletEvent.Bullet\032\212\001\n\tTacheBo"
    "mp\022\020\n\010bompTime\030\001 \002(\002\022\020\n\010bompRang\030\002 \002(\002\022\026"
    "\n\016bompPrefabPath\030\003 \002(\t\022\030\n\020beAttackPartic"
    "le\030\004 \002(\t\022\022\n\nbackNpcDis\030\005 \002(\002\022\023\n\013backHero"
    "Dis\030\006 \002(\002\032\366\002\n\006Bullet\022\021\n\teventTime\030\001 \002(\002\022"
    ",\n\teventType\030\002 \002(\0162\031.NFFS.BulletEvent.EB"
    "EType\022\r\n\005speed\030\003 \002(\002\022\016\n\006maxDis\030\004 \002(\002\022\022\n\n"
    "bulletRang\030\005 \002(\002\0226\n\016bulletBackType\030\006 \002(\016"
    "2\036.NFFS.BulletEvent.EBE_BACKType\022\023\n\013back"
    "HeroDis\030\007 \002(\002\022\022\n\nbackNpcDis\030\010 \002(\002\022\023\n\013tac"
    "heDetroy\030\t \002(\005\022\030\n\020beAttackParticle\030\n \002(\t"
    "\022#\n\nfireOffest\030\013 \002(\0132\017.NFFS.FSVector3\022\030\n"
    "\020bulletPrefabPath\030\014 \002(\t\022)\n\004bomp\030\r \002(\0132\033."
    "NFFS.BulletEvent.TacheBomp\"-\n\007EBEType\022\017\n"
    "\013ESET_TARGET\020\000\022\021\n\rESET_POSITION\020\001\".\n\014EBE"
    "_BACKType\022\016\n\nEBEBT_BACK\020\000\022\016\n\nEBEBT_SIDE\020"
    "\001\"l\n\nAudioEvent\022)\n\taudioList\030\001 \003(\0132\026.NFF"
    "S.AudioEvent.Audio\0323\n\005Audio\022\021\n\teventTime"
    "\030\001 \002(\002\022\027\n\017audioPrefabName\030\003 \002(\t\"\337\001\n\tMove"
    "Event\022\'\n\tmoveEvent\030\001 \003(\0132\024.NFFS.MoveEven"
    "t.Move\032g\n\004Move\022\021\n\teventTime\030\001 \002(\002\022)\n\teve"
    "ntType\030\002 \002(\0162\026.NFFS.MoveEvent.METype\022\017\n\007"
    "moveDis\030\003 \002(\002\022\020\n\010moveTime\030\004 \002(\002\"@\n\006METyp"
    "e\022\016\n\nME_FORWARD\020\000\022\013\n\007ME_BACK\020\001\022\013\n\007ME_LEF"
    "T\020\002\022\014\n\010ME_RIGHT\020\003\"\310\002\n\013CameraEvent\0221\n\017cam"
    "eraEventList\030\001 \003(\0132\030.NFFS.CameraEvent.Ca"
    "mera\032\201\001\n\006Camera\022\021\n\teventTime\030\001 \002(\002\022+\n\tev"
    "entType\030\002 \002(\0162\030.NFFS.CameraEvent.CEType\022"
    "$\n\013amountParam\030\003 \002(\0132\017.NFFS.FSVector3\022\021\n"
    "\tshakeTime\030\004 \002(\002\"\201\001\n\006CEType\022\016\n\nEarthquak"
    "e\020\000\022\r\n\tExplosion\020\001\022\006\n\002No\020\002\022\014\n\010FireKick\020\003"
    "\022\t\n\005Stomp\020\004\022\007\n\003Yes\020\005\022\017\n\013SprintShake\020\006\022\014\n"
    "\010FreeMode\020\007\022\017\n\013MainRPGMode\020\010\"\275\001\n\014EnableE"
    "vents\022-\n\nenableList\030\001 \003(\0132\031.NFFS.EnableE"
    "vents.Enable\032^\n\006Enable\022\021\n\teventTime\030\001 \002("
    "\002\022-\n\teventType\030\002 \002(\0162\032.NFFS.EnableEvents"
    ".EEETYPE\022\022\n\ntargetName\030\003 \002(\t\"\036\n\007EEETYPE\022"
    "\010\n\004INIT\020\000\022\t\n\005FINAL\020\001\"\267\001\n\013GlobalSpeed\022*\n\t"
    "speedList\030\001 \003(\0132\027.NFFS.GlobalSpeed.Speed"
    "\032\\\n\005Speed\022\021\n\teventTime\030\001 \002(\002\022,\n\teventTyp"
    "e\030\002 \002(\0162\031.NFFS.GlobalSpeed.EGSTYPE\022\022\n\nsp"
    "eedValue\030\003 \002(\002\"\036\n\007EGSTYPE\022\010\n\004INIT\020\000\022\t\n\005F"
    "INAL\020\001", 2086);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFFleetingDefine.proto", &protobuf_RegisterTypes);
  FSVector3::default_instance_ = new FSVector3();
  FixTimeEvent::default_instance_ = new FixTimeEvent();
  FixTimeEvent_EventTrigger::default_instance_ = new FixTimeEvent_EventTrigger();
  FixTimeEvent_HitTrigger::default_instance_ = new FixTimeEvent_HitTrigger();
  BulletEvent::default_instance_ = new BulletEvent();
  BulletEvent_TacheBomp::default_instance_ = new BulletEvent_TacheBomp();
  BulletEvent_Bullet::default_instance_ = new BulletEvent_Bullet();
  AudioEvent::default_instance_ = new AudioEvent();
  AudioEvent_Audio::default_instance_ = new AudioEvent_Audio();
  MoveEvent::default_instance_ = new MoveEvent();
  MoveEvent_Move::default_instance_ = new MoveEvent_Move();
  CameraEvent::default_instance_ = new CameraEvent();
  CameraEvent_Camera::default_instance_ = new CameraEvent_Camera();
  EnableEvents::default_instance_ = new EnableEvents();
  EnableEvents_Enable::default_instance_ = new EnableEvents_Enable();
  GlobalSpeed::default_instance_ = new GlobalSpeed();
  GlobalSpeed_Speed::default_instance_ = new GlobalSpeed_Speed();
  FSVector3::default_instance_->InitAsDefaultInstance();
  FixTimeEvent::default_instance_->InitAsDefaultInstance();
  FixTimeEvent_EventTrigger::default_instance_->InitAsDefaultInstance();
  FixTimeEvent_HitTrigger::default_instance_->InitAsDefaultInstance();
  BulletEvent::default_instance_->InitAsDefaultInstance();
  BulletEvent_TacheBomp::default_instance_->InitAsDefaultInstance();
  BulletEvent_Bullet::default_instance_->InitAsDefaultInstance();
  AudioEvent::default_instance_->InitAsDefaultInstance();
  AudioEvent_Audio::default_instance_->InitAsDefaultInstance();
  MoveEvent::default_instance_->InitAsDefaultInstance();
  MoveEvent_Move::default_instance_->InitAsDefaultInstance();
  CameraEvent::default_instance_->InitAsDefaultInstance();
  CameraEvent_Camera::default_instance_->InitAsDefaultInstance();
  EnableEvents::default_instance_->InitAsDefaultInstance();
  EnableEvents_Enable::default_instance_->InitAsDefaultInstance();
  GlobalSpeed::default_instance_->InitAsDefaultInstance();
  GlobalSpeed_Speed::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NFFleetingDefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NFFleetingDefine_2eproto {
  StaticDescriptorInitializer_NFFleetingDefine_2eproto() {
    protobuf_AddDesc_NFFleetingDefine_2eproto();
  }
} static_descriptor_initializer_NFFleetingDefine_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FSVector3::kXFieldNumber;
const int FSVector3::kYFieldNumber;
const int FSVector3::kZFieldNumber;
#endif  // !_MSC_VER

FSVector3::FSVector3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FSVector3::InitAsDefaultInstance() {
}

FSVector3::FSVector3(const FSVector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FSVector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FSVector3::~FSVector3() {
  SharedDtor();
}

void FSVector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FSVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FSVector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FSVector3_descriptor_;
}

const FSVector3& FSVector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

FSVector3* FSVector3::default_instance_ = NULL;

FSVector3* FSVector3::New() const {
  return new FSVector3;
}

void FSVector3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FSVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FSVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FSVector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FSVector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FSVector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FSVector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FSVector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FSVector3::MergeFrom(const FSVector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FSVector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FSVector3::CopyFrom(const FSVector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FSVector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FSVector3::Swap(FSVector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FSVector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FSVector3_descriptor_;
  metadata.reflection = FSVector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FixTimeEvent_EventTrigger::kEventTimeFieldNumber;
const int FixTimeEvent_EventTrigger::kVFieldNumber;
const int FixTimeEvent_EventTrigger::kPrefabFieldNumber;
#endif  // !_MSC_VER

FixTimeEvent_EventTrigger::FixTimeEvent_EventTrigger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FixTimeEvent_EventTrigger::InitAsDefaultInstance() {
  v_ = const_cast< ::NFFS::FSVector3*>(&::NFFS::FSVector3::default_instance());
}

FixTimeEvent_EventTrigger::FixTimeEvent_EventTrigger(const FixTimeEvent_EventTrigger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FixTimeEvent_EventTrigger::SharedCtor() {
  _cached_size_ = 0;
  eventtime_ = 0;
  v_ = NULL;
  prefab_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixTimeEvent_EventTrigger::~FixTimeEvent_EventTrigger() {
  SharedDtor();
}

void FixTimeEvent_EventTrigger::SharedDtor() {
  if (prefab_ != &::google::protobuf::internal::kEmptyString) {
    delete prefab_;
  }
  if (this != default_instance_) {
    delete v_;
  }
}

void FixTimeEvent_EventTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixTimeEvent_EventTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixTimeEvent_EventTrigger_descriptor_;
}

const FixTimeEvent_EventTrigger& FixTimeEvent_EventTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

FixTimeEvent_EventTrigger* FixTimeEvent_EventTrigger::default_instance_ = NULL;

FixTimeEvent_EventTrigger* FixTimeEvent_EventTrigger::New() const {
  return new FixTimeEvent_EventTrigger;
}

void FixTimeEvent_EventTrigger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventtime_ = 0;
    if (has_v()) {
      if (v_ != NULL) v_->::NFFS::FSVector3::Clear();
    }
    if (has_prefab()) {
      if (prefab_ != &::google::protobuf::internal::kEmptyString) {
        prefab_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixTimeEvent_EventTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float eventTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eventtime_)));
          set_has_eventtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_v;
        break;
      }

      // required .NFFS.FSVector3 v = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prefab;
        break;
      }

      // required string prefab = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prefab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefab()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prefab().data(), this->prefab().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FixTimeEvent_EventTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float eventTime = 1;
  if (has_eventtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eventtime(), output);
  }

  // required .NFFS.FSVector3 v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->v(), output);
  }

  // required string prefab = 3;
  if (has_prefab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefab().data(), this->prefab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->prefab(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FixTimeEvent_EventTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float eventTime = 1;
  if (has_eventtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eventtime(), target);
  }

  // required .NFFS.FSVector3 v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->v(), target);
  }

  // required string prefab = 3;
  if (has_prefab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefab().data(), this->prefab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->prefab(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FixTimeEvent_EventTrigger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float eventTime = 1;
    if (has_eventtime()) {
      total_size += 1 + 4;
    }

    // required .NFFS.FSVector3 v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->v());
    }

    // required string prefab = 3;
    if (has_prefab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefab());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixTimeEvent_EventTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixTimeEvent_EventTrigger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixTimeEvent_EventTrigger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixTimeEvent_EventTrigger::MergeFrom(const FixTimeEvent_EventTrigger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtime()) {
      set_eventtime(from.eventtime());
    }
    if (from.has_v()) {
      mutable_v()->::NFFS::FSVector3::MergeFrom(from.v());
    }
    if (from.has_prefab()) {
      set_prefab(from.prefab());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixTimeEvent_EventTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixTimeEvent_EventTrigger::CopyFrom(const FixTimeEvent_EventTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixTimeEvent_EventTrigger::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_v()) {
    if (!this->v().IsInitialized()) return false;
  }
  return true;
}

void FixTimeEvent_EventTrigger::Swap(FixTimeEvent_EventTrigger* other) {
  if (other != this) {
    std::swap(eventtime_, other->eventtime_);
    std::swap(v_, other->v_);
    std::swap(prefab_, other->prefab_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixTimeEvent_EventTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixTimeEvent_EventTrigger_descriptor_;
  metadata.reflection = FixTimeEvent_EventTrigger_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FixTimeEvent_HitTrigger::kHitTimeFieldNumber;
const int FixTimeEvent_HitTrigger::kPrefabFieldNumber;
const int FixTimeEvent_HitTrigger::kBackHeroDisFieldNumber;
const int FixTimeEvent_HitTrigger::kBackNpcDisFieldNumber;
#endif  // !_MSC_VER

FixTimeEvent_HitTrigger::FixTimeEvent_HitTrigger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FixTimeEvent_HitTrigger::InitAsDefaultInstance() {
}

FixTimeEvent_HitTrigger::FixTimeEvent_HitTrigger(const FixTimeEvent_HitTrigger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FixTimeEvent_HitTrigger::SharedCtor() {
  _cached_size_ = 0;
  hittime_ = 0;
  prefab_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backherodis_ = 0;
  backnpcdis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixTimeEvent_HitTrigger::~FixTimeEvent_HitTrigger() {
  SharedDtor();
}

void FixTimeEvent_HitTrigger::SharedDtor() {
  if (prefab_ != &::google::protobuf::internal::kEmptyString) {
    delete prefab_;
  }
  if (this != default_instance_) {
  }
}

void FixTimeEvent_HitTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixTimeEvent_HitTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixTimeEvent_HitTrigger_descriptor_;
}

const FixTimeEvent_HitTrigger& FixTimeEvent_HitTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

FixTimeEvent_HitTrigger* FixTimeEvent_HitTrigger::default_instance_ = NULL;

FixTimeEvent_HitTrigger* FixTimeEvent_HitTrigger::New() const {
  return new FixTimeEvent_HitTrigger;
}

void FixTimeEvent_HitTrigger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hittime_ = 0;
    if (has_prefab()) {
      if (prefab_ != &::google::protobuf::internal::kEmptyString) {
        prefab_->clear();
      }
    }
    backherodis_ = 0;
    backnpcdis_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixTimeEvent_HitTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float hitTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hittime_)));
          set_has_hittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prefab;
        break;
      }

      // required string prefab = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prefab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefab()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prefab().data(), this->prefab().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_backHeroDis;
        break;
      }

      // required float backHeroDis = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_backHeroDis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &backherodis_)));
          set_has_backherodis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_backNpcDis;
        break;
      }

      // required float backNpcDis = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_backNpcDis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &backnpcdis_)));
          set_has_backnpcdis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FixTimeEvent_HitTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float hitTime = 1;
  if (has_hittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->hittime(), output);
  }

  // required string prefab = 2;
  if (has_prefab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefab().data(), this->prefab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->prefab(), output);
  }

  // required float backHeroDis = 3;
  if (has_backherodis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->backherodis(), output);
  }

  // required float backNpcDis = 4;
  if (has_backnpcdis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->backnpcdis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FixTimeEvent_HitTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float hitTime = 1;
  if (has_hittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->hittime(), target);
  }

  // required string prefab = 2;
  if (has_prefab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefab().data(), this->prefab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->prefab(), target);
  }

  // required float backHeroDis = 3;
  if (has_backherodis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->backherodis(), target);
  }

  // required float backNpcDis = 4;
  if (has_backnpcdis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->backnpcdis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FixTimeEvent_HitTrigger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float hitTime = 1;
    if (has_hittime()) {
      total_size += 1 + 4;
    }

    // required string prefab = 2;
    if (has_prefab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefab());
    }

    // required float backHeroDis = 3;
    if (has_backherodis()) {
      total_size += 1 + 4;
    }

    // required float backNpcDis = 4;
    if (has_backnpcdis()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixTimeEvent_HitTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixTimeEvent_HitTrigger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixTimeEvent_HitTrigger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixTimeEvent_HitTrigger::MergeFrom(const FixTimeEvent_HitTrigger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hittime()) {
      set_hittime(from.hittime());
    }
    if (from.has_prefab()) {
      set_prefab(from.prefab());
    }
    if (from.has_backherodis()) {
      set_backherodis(from.backherodis());
    }
    if (from.has_backnpcdis()) {
      set_backnpcdis(from.backnpcdis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixTimeEvent_HitTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixTimeEvent_HitTrigger::CopyFrom(const FixTimeEvent_HitTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixTimeEvent_HitTrigger::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FixTimeEvent_HitTrigger::Swap(FixTimeEvent_HitTrigger* other) {
  if (other != this) {
    std::swap(hittime_, other->hittime_);
    std::swap(prefab_, other->prefab_);
    std::swap(backherodis_, other->backherodis_);
    std::swap(backnpcdis_, other->backnpcdis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixTimeEvent_HitTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixTimeEvent_HitTrigger_descriptor_;
  metadata.reflection = FixTimeEvent_HitTrigger_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FixTimeEvent::kHitTriggerFieldNumber;
const int FixTimeEvent::kEventTriggerFieldNumber;
#endif  // !_MSC_VER

FixTimeEvent::FixTimeEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FixTimeEvent::InitAsDefaultInstance() {
}

FixTimeEvent::FixTimeEvent(const FixTimeEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FixTimeEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixTimeEvent::~FixTimeEvent() {
  SharedDtor();
}

void FixTimeEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FixTimeEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixTimeEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixTimeEvent_descriptor_;
}

const FixTimeEvent& FixTimeEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

FixTimeEvent* FixTimeEvent::default_instance_ = NULL;

FixTimeEvent* FixTimeEvent::New() const {
  return new FixTimeEvent;
}

void FixTimeEvent::Clear() {
  hittrigger_.Clear();
  eventtrigger_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixTimeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFFS.FixTimeEvent.HitTrigger hitTrigger = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hitTrigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hittrigger()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hitTrigger;
        if (input->ExpectTag(42)) goto parse_eventTrigger;
        break;
      }

      // repeated .NFFS.FixTimeEvent.EventTrigger eventTrigger = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventTrigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eventtrigger()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_eventTrigger;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FixTimeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFFS.FixTimeEvent.HitTrigger hitTrigger = 1;
  for (int i = 0; i < this->hittrigger_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hittrigger(i), output);
  }

  // repeated .NFFS.FixTimeEvent.EventTrigger eventTrigger = 5;
  for (int i = 0; i < this->eventtrigger_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->eventtrigger(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FixTimeEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFFS.FixTimeEvent.HitTrigger hitTrigger = 1;
  for (int i = 0; i < this->hittrigger_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hittrigger(i), target);
  }

  // repeated .NFFS.FixTimeEvent.EventTrigger eventTrigger = 5;
  for (int i = 0; i < this->eventtrigger_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->eventtrigger(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FixTimeEvent::ByteSize() const {
  int total_size = 0;

  // repeated .NFFS.FixTimeEvent.HitTrigger hitTrigger = 1;
  total_size += 1 * this->hittrigger_size();
  for (int i = 0; i < this->hittrigger_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hittrigger(i));
  }

  // repeated .NFFS.FixTimeEvent.EventTrigger eventTrigger = 5;
  total_size += 1 * this->eventtrigger_size();
  for (int i = 0; i < this->eventtrigger_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eventtrigger(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixTimeEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixTimeEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixTimeEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixTimeEvent::MergeFrom(const FixTimeEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  hittrigger_.MergeFrom(from.hittrigger_);
  eventtrigger_.MergeFrom(from.eventtrigger_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixTimeEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixTimeEvent::CopyFrom(const FixTimeEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixTimeEvent::IsInitialized() const {

  for (int i = 0; i < hittrigger_size(); i++) {
    if (!this->hittrigger(i).IsInitialized()) return false;
  }
  for (int i = 0; i < eventtrigger_size(); i++) {
    if (!this->eventtrigger(i).IsInitialized()) return false;
  }
  return true;
}

void FixTimeEvent::Swap(FixTimeEvent* other) {
  if (other != this) {
    hittrigger_.Swap(&other->hittrigger_);
    eventtrigger_.Swap(&other->eventtrigger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixTimeEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixTimeEvent_descriptor_;
  metadata.reflection = FixTimeEvent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BulletEvent_EBEType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletEvent_EBEType_descriptor_;
}
bool BulletEvent_EBEType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BulletEvent_EBEType BulletEvent::ESET_TARGET;
const BulletEvent_EBEType BulletEvent::ESET_POSITION;
const BulletEvent_EBEType BulletEvent::EBEType_MIN;
const BulletEvent_EBEType BulletEvent::EBEType_MAX;
const int BulletEvent::EBEType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BulletEvent_EBE_BACKType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletEvent_EBE_BACKType_descriptor_;
}
bool BulletEvent_EBE_BACKType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BulletEvent_EBE_BACKType BulletEvent::EBEBT_BACK;
const BulletEvent_EBE_BACKType BulletEvent::EBEBT_SIDE;
const BulletEvent_EBE_BACKType BulletEvent::EBE_BACKType_MIN;
const BulletEvent_EBE_BACKType BulletEvent::EBE_BACKType_MAX;
const int BulletEvent::EBE_BACKType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BulletEvent_TacheBomp::kBompTimeFieldNumber;
const int BulletEvent_TacheBomp::kBompRangFieldNumber;
const int BulletEvent_TacheBomp::kBompPrefabPathFieldNumber;
const int BulletEvent_TacheBomp::kBeAttackParticleFieldNumber;
const int BulletEvent_TacheBomp::kBackNpcDisFieldNumber;
const int BulletEvent_TacheBomp::kBackHeroDisFieldNumber;
#endif  // !_MSC_VER

BulletEvent_TacheBomp::BulletEvent_TacheBomp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BulletEvent_TacheBomp::InitAsDefaultInstance() {
}

BulletEvent_TacheBomp::BulletEvent_TacheBomp(const BulletEvent_TacheBomp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BulletEvent_TacheBomp::SharedCtor() {
  _cached_size_ = 0;
  bomptime_ = 0;
  bomprang_ = 0;
  bompprefabpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beattackparticle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backnpcdis_ = 0;
  backherodis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulletEvent_TacheBomp::~BulletEvent_TacheBomp() {
  SharedDtor();
}

void BulletEvent_TacheBomp::SharedDtor() {
  if (bompprefabpath_ != &::google::protobuf::internal::kEmptyString) {
    delete bompprefabpath_;
  }
  if (beattackparticle_ != &::google::protobuf::internal::kEmptyString) {
    delete beattackparticle_;
  }
  if (this != default_instance_) {
  }
}

void BulletEvent_TacheBomp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulletEvent_TacheBomp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletEvent_TacheBomp_descriptor_;
}

const BulletEvent_TacheBomp& BulletEvent_TacheBomp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

BulletEvent_TacheBomp* BulletEvent_TacheBomp::default_instance_ = NULL;

BulletEvent_TacheBomp* BulletEvent_TacheBomp::New() const {
  return new BulletEvent_TacheBomp;
}

void BulletEvent_TacheBomp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bomptime_ = 0;
    bomprang_ = 0;
    if (has_bompprefabpath()) {
      if (bompprefabpath_ != &::google::protobuf::internal::kEmptyString) {
        bompprefabpath_->clear();
      }
    }
    if (has_beattackparticle()) {
      if (beattackparticle_ != &::google::protobuf::internal::kEmptyString) {
        beattackparticle_->clear();
      }
    }
    backnpcdis_ = 0;
    backherodis_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BulletEvent_TacheBomp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float bompTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bomptime_)));
          set_has_bomptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_bompRang;
        break;
      }

      // required float bompRang = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bompRang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bomprang_)));
          set_has_bomprang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bompPrefabPath;
        break;
      }

      // required string bompPrefabPath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bompPrefabPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bompprefabpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bompprefabpath().data(), this->bompprefabpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_beAttackParticle;
        break;
      }

      // required string beAttackParticle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beAttackParticle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beattackparticle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beattackparticle().data(), this->beattackparticle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_backNpcDis;
        break;
      }

      // required float backNpcDis = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_backNpcDis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &backnpcdis_)));
          set_has_backnpcdis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_backHeroDis;
        break;
      }

      // required float backHeroDis = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_backHeroDis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &backherodis_)));
          set_has_backherodis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulletEvent_TacheBomp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float bompTime = 1;
  if (has_bomptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->bomptime(), output);
  }

  // required float bompRang = 2;
  if (has_bomprang()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bomprang(), output);
  }

  // required string bompPrefabPath = 3;
  if (has_bompprefabpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bompprefabpath().data(), this->bompprefabpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bompprefabpath(), output);
  }

  // required string beAttackParticle = 4;
  if (has_beattackparticle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beattackparticle().data(), this->beattackparticle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->beattackparticle(), output);
  }

  // required float backNpcDis = 5;
  if (has_backnpcdis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->backnpcdis(), output);
  }

  // required float backHeroDis = 6;
  if (has_backherodis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->backherodis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BulletEvent_TacheBomp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float bompTime = 1;
  if (has_bomptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->bomptime(), target);
  }

  // required float bompRang = 2;
  if (has_bomprang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->bomprang(), target);
  }

  // required string bompPrefabPath = 3;
  if (has_bompprefabpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bompprefabpath().data(), this->bompprefabpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bompprefabpath(), target);
  }

  // required string beAttackParticle = 4;
  if (has_beattackparticle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beattackparticle().data(), this->beattackparticle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->beattackparticle(), target);
  }

  // required float backNpcDis = 5;
  if (has_backnpcdis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->backnpcdis(), target);
  }

  // required float backHeroDis = 6;
  if (has_backherodis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->backherodis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BulletEvent_TacheBomp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float bompTime = 1;
    if (has_bomptime()) {
      total_size += 1 + 4;
    }

    // required float bompRang = 2;
    if (has_bomprang()) {
      total_size += 1 + 4;
    }

    // required string bompPrefabPath = 3;
    if (has_bompprefabpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bompprefabpath());
    }

    // required string beAttackParticle = 4;
    if (has_beattackparticle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beattackparticle());
    }

    // required float backNpcDis = 5;
    if (has_backnpcdis()) {
      total_size += 1 + 4;
    }

    // required float backHeroDis = 6;
    if (has_backherodis()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletEvent_TacheBomp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BulletEvent_TacheBomp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BulletEvent_TacheBomp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BulletEvent_TacheBomp::MergeFrom(const BulletEvent_TacheBomp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bomptime()) {
      set_bomptime(from.bomptime());
    }
    if (from.has_bomprang()) {
      set_bomprang(from.bomprang());
    }
    if (from.has_bompprefabpath()) {
      set_bompprefabpath(from.bompprefabpath());
    }
    if (from.has_beattackparticle()) {
      set_beattackparticle(from.beattackparticle());
    }
    if (from.has_backnpcdis()) {
      set_backnpcdis(from.backnpcdis());
    }
    if (from.has_backherodis()) {
      set_backherodis(from.backherodis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BulletEvent_TacheBomp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletEvent_TacheBomp::CopyFrom(const BulletEvent_TacheBomp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletEvent_TacheBomp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void BulletEvent_TacheBomp::Swap(BulletEvent_TacheBomp* other) {
  if (other != this) {
    std::swap(bomptime_, other->bomptime_);
    std::swap(bomprang_, other->bomprang_);
    std::swap(bompprefabpath_, other->bompprefabpath_);
    std::swap(beattackparticle_, other->beattackparticle_);
    std::swap(backnpcdis_, other->backnpcdis_);
    std::swap(backherodis_, other->backherodis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BulletEvent_TacheBomp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulletEvent_TacheBomp_descriptor_;
  metadata.reflection = BulletEvent_TacheBomp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BulletEvent_Bullet::kEventTimeFieldNumber;
const int BulletEvent_Bullet::kEventTypeFieldNumber;
const int BulletEvent_Bullet::kSpeedFieldNumber;
const int BulletEvent_Bullet::kMaxDisFieldNumber;
const int BulletEvent_Bullet::kBulletRangFieldNumber;
const int BulletEvent_Bullet::kBulletBackTypeFieldNumber;
const int BulletEvent_Bullet::kBackHeroDisFieldNumber;
const int BulletEvent_Bullet::kBackNpcDisFieldNumber;
const int BulletEvent_Bullet::kTacheDetroyFieldNumber;
const int BulletEvent_Bullet::kBeAttackParticleFieldNumber;
const int BulletEvent_Bullet::kFireOffestFieldNumber;
const int BulletEvent_Bullet::kBulletPrefabPathFieldNumber;
const int BulletEvent_Bullet::kBompFieldNumber;
#endif  // !_MSC_VER

BulletEvent_Bullet::BulletEvent_Bullet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BulletEvent_Bullet::InitAsDefaultInstance() {
  fireoffest_ = const_cast< ::NFFS::FSVector3*>(&::NFFS::FSVector3::default_instance());
  bomp_ = const_cast< ::NFFS::BulletEvent_TacheBomp*>(&::NFFS::BulletEvent_TacheBomp::default_instance());
}

BulletEvent_Bullet::BulletEvent_Bullet(const BulletEvent_Bullet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BulletEvent_Bullet::SharedCtor() {
  _cached_size_ = 0;
  eventtime_ = 0;
  eventtype_ = 0;
  speed_ = 0;
  maxdis_ = 0;
  bulletrang_ = 0;
  bulletbacktype_ = 0;
  backherodis_ = 0;
  backnpcdis_ = 0;
  tachedetroy_ = 0;
  beattackparticle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fireoffest_ = NULL;
  bulletprefabpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bomp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulletEvent_Bullet::~BulletEvent_Bullet() {
  SharedDtor();
}

void BulletEvent_Bullet::SharedDtor() {
  if (beattackparticle_ != &::google::protobuf::internal::kEmptyString) {
    delete beattackparticle_;
  }
  if (bulletprefabpath_ != &::google::protobuf::internal::kEmptyString) {
    delete bulletprefabpath_;
  }
  if (this != default_instance_) {
    delete fireoffest_;
    delete bomp_;
  }
}

void BulletEvent_Bullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulletEvent_Bullet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletEvent_Bullet_descriptor_;
}

const BulletEvent_Bullet& BulletEvent_Bullet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

BulletEvent_Bullet* BulletEvent_Bullet::default_instance_ = NULL;

BulletEvent_Bullet* BulletEvent_Bullet::New() const {
  return new BulletEvent_Bullet;
}

void BulletEvent_Bullet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventtime_ = 0;
    eventtype_ = 0;
    speed_ = 0;
    maxdis_ = 0;
    bulletrang_ = 0;
    bulletbacktype_ = 0;
    backherodis_ = 0;
    backnpcdis_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tachedetroy_ = 0;
    if (has_beattackparticle()) {
      if (beattackparticle_ != &::google::protobuf::internal::kEmptyString) {
        beattackparticle_->clear();
      }
    }
    if (has_fireoffest()) {
      if (fireoffest_ != NULL) fireoffest_->::NFFS::FSVector3::Clear();
    }
    if (has_bulletprefabpath()) {
      if (bulletprefabpath_ != &::google::protobuf::internal::kEmptyString) {
        bulletprefabpath_->clear();
      }
    }
    if (has_bomp()) {
      if (bomp_ != NULL) bomp_->::NFFS::BulletEvent_TacheBomp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BulletEvent_Bullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float eventTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eventtime_)));
          set_has_eventtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eventType;
        break;
      }

      // required .NFFS.BulletEvent.EBEType eventType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFFS::BulletEvent_EBEType_IsValid(value)) {
            set_eventtype(static_cast< ::NFFS::BulletEvent_EBEType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_speed;
        break;
      }

      // required float speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_maxDis;
        break;
      }

      // required float maxDis = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxDis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxdis_)));
          set_has_maxdis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_bulletRang;
        break;
      }

      // required float bulletRang = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bulletRang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bulletrang_)));
          set_has_bulletrang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bulletBackType;
        break;
      }

      // required .NFFS.BulletEvent.EBE_BACKType bulletBackType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulletBackType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFFS::BulletEvent_EBE_BACKType_IsValid(value)) {
            set_bulletbacktype(static_cast< ::NFFS::BulletEvent_EBE_BACKType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_backHeroDis;
        break;
      }

      // required float backHeroDis = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_backHeroDis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &backherodis_)));
          set_has_backherodis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_backNpcDis;
        break;
      }

      // required float backNpcDis = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_backNpcDis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &backnpcdis_)));
          set_has_backnpcdis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_tacheDetroy;
        break;
      }

      // required int32 tacheDetroy = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tacheDetroy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tachedetroy_)));
          set_has_tachedetroy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_beAttackParticle;
        break;
      }

      // required string beAttackParticle = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beAttackParticle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beattackparticle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beattackparticle().data(), this->beattackparticle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_fireOffest;
        break;
      }

      // required .NFFS.FSVector3 fireOffest = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fireOffest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fireoffest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_bulletPrefabPath;
        break;
      }

      // required string bulletPrefabPath = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bulletPrefabPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bulletprefabpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bulletprefabpath().data(), this->bulletprefabpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_bomp;
        break;
      }

      // required .NFFS.BulletEvent.TacheBomp bomp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bomp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bomp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulletEvent_Bullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float eventTime = 1;
  if (has_eventtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eventtime(), output);
  }

  // required .NFFS.BulletEvent.EBEType eventType = 2;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eventtype(), output);
  }

  // required float speed = 3;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed(), output);
  }

  // required float maxDis = 4;
  if (has_maxdis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->maxdis(), output);
  }

  // required float bulletRang = 5;
  if (has_bulletrang()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->bulletrang(), output);
  }

  // required .NFFS.BulletEvent.EBE_BACKType bulletBackType = 6;
  if (has_bulletbacktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->bulletbacktype(), output);
  }

  // required float backHeroDis = 7;
  if (has_backherodis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->backherodis(), output);
  }

  // required float backNpcDis = 8;
  if (has_backnpcdis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->backnpcdis(), output);
  }

  // required int32 tacheDetroy = 9;
  if (has_tachedetroy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tachedetroy(), output);
  }

  // required string beAttackParticle = 10;
  if (has_beattackparticle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beattackparticle().data(), this->beattackparticle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->beattackparticle(), output);
  }

  // required .NFFS.FSVector3 fireOffest = 11;
  if (has_fireoffest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->fireoffest(), output);
  }

  // required string bulletPrefabPath = 12;
  if (has_bulletprefabpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bulletprefabpath().data(), this->bulletprefabpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->bulletprefabpath(), output);
  }

  // required .NFFS.BulletEvent.TacheBomp bomp = 13;
  if (has_bomp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->bomp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BulletEvent_Bullet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float eventTime = 1;
  if (has_eventtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eventtime(), target);
  }

  // required .NFFS.BulletEvent.EBEType eventType = 2;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eventtype(), target);
  }

  // required float speed = 3;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed(), target);
  }

  // required float maxDis = 4;
  if (has_maxdis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->maxdis(), target);
  }

  // required float bulletRang = 5;
  if (has_bulletrang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->bulletrang(), target);
  }

  // required .NFFS.BulletEvent.EBE_BACKType bulletBackType = 6;
  if (has_bulletbacktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->bulletbacktype(), target);
  }

  // required float backHeroDis = 7;
  if (has_backherodis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->backherodis(), target);
  }

  // required float backNpcDis = 8;
  if (has_backnpcdis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->backnpcdis(), target);
  }

  // required int32 tacheDetroy = 9;
  if (has_tachedetroy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tachedetroy(), target);
  }

  // required string beAttackParticle = 10;
  if (has_beattackparticle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beattackparticle().data(), this->beattackparticle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->beattackparticle(), target);
  }

  // required .NFFS.FSVector3 fireOffest = 11;
  if (has_fireoffest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->fireoffest(), target);
  }

  // required string bulletPrefabPath = 12;
  if (has_bulletprefabpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bulletprefabpath().data(), this->bulletprefabpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->bulletprefabpath(), target);
  }

  // required .NFFS.BulletEvent.TacheBomp bomp = 13;
  if (has_bomp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->bomp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BulletEvent_Bullet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float eventTime = 1;
    if (has_eventtime()) {
      total_size += 1 + 4;
    }

    // required .NFFS.BulletEvent.EBEType eventType = 2;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

    // required float speed = 3;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // required float maxDis = 4;
    if (has_maxdis()) {
      total_size += 1 + 4;
    }

    // required float bulletRang = 5;
    if (has_bulletrang()) {
      total_size += 1 + 4;
    }

    // required .NFFS.BulletEvent.EBE_BACKType bulletBackType = 6;
    if (has_bulletbacktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bulletbacktype());
    }

    // required float backHeroDis = 7;
    if (has_backherodis()) {
      total_size += 1 + 4;
    }

    // required float backNpcDis = 8;
    if (has_backnpcdis()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 tacheDetroy = 9;
    if (has_tachedetroy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tachedetroy());
    }

    // required string beAttackParticle = 10;
    if (has_beattackparticle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beattackparticle());
    }

    // required .NFFS.FSVector3 fireOffest = 11;
    if (has_fireoffest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fireoffest());
    }

    // required string bulletPrefabPath = 12;
    if (has_bulletprefabpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bulletprefabpath());
    }

    // required .NFFS.BulletEvent.TacheBomp bomp = 13;
    if (has_bomp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bomp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletEvent_Bullet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BulletEvent_Bullet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BulletEvent_Bullet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BulletEvent_Bullet::MergeFrom(const BulletEvent_Bullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtime()) {
      set_eventtime(from.eventtime());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_maxdis()) {
      set_maxdis(from.maxdis());
    }
    if (from.has_bulletrang()) {
      set_bulletrang(from.bulletrang());
    }
    if (from.has_bulletbacktype()) {
      set_bulletbacktype(from.bulletbacktype());
    }
    if (from.has_backherodis()) {
      set_backherodis(from.backherodis());
    }
    if (from.has_backnpcdis()) {
      set_backnpcdis(from.backnpcdis());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tachedetroy()) {
      set_tachedetroy(from.tachedetroy());
    }
    if (from.has_beattackparticle()) {
      set_beattackparticle(from.beattackparticle());
    }
    if (from.has_fireoffest()) {
      mutable_fireoffest()->::NFFS::FSVector3::MergeFrom(from.fireoffest());
    }
    if (from.has_bulletprefabpath()) {
      set_bulletprefabpath(from.bulletprefabpath());
    }
    if (from.has_bomp()) {
      mutable_bomp()->::NFFS::BulletEvent_TacheBomp::MergeFrom(from.bomp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BulletEvent_Bullet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletEvent_Bullet::CopyFrom(const BulletEvent_Bullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletEvent_Bullet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  if (has_fireoffest()) {
    if (!this->fireoffest().IsInitialized()) return false;
  }
  if (has_bomp()) {
    if (!this->bomp().IsInitialized()) return false;
  }
  return true;
}

void BulletEvent_Bullet::Swap(BulletEvent_Bullet* other) {
  if (other != this) {
    std::swap(eventtime_, other->eventtime_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(speed_, other->speed_);
    std::swap(maxdis_, other->maxdis_);
    std::swap(bulletrang_, other->bulletrang_);
    std::swap(bulletbacktype_, other->bulletbacktype_);
    std::swap(backherodis_, other->backherodis_);
    std::swap(backnpcdis_, other->backnpcdis_);
    std::swap(tachedetroy_, other->tachedetroy_);
    std::swap(beattackparticle_, other->beattackparticle_);
    std::swap(fireoffest_, other->fireoffest_);
    std::swap(bulletprefabpath_, other->bulletprefabpath_);
    std::swap(bomp_, other->bomp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BulletEvent_Bullet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulletEvent_Bullet_descriptor_;
  metadata.reflection = BulletEvent_Bullet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BulletEvent::kBulletListFieldNumber;
#endif  // !_MSC_VER

BulletEvent::BulletEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BulletEvent::InitAsDefaultInstance() {
}

BulletEvent::BulletEvent(const BulletEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BulletEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulletEvent::~BulletEvent() {
  SharedDtor();
}

void BulletEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BulletEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulletEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletEvent_descriptor_;
}

const BulletEvent& BulletEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

BulletEvent* BulletEvent::default_instance_ = NULL;

BulletEvent* BulletEvent::New() const {
  return new BulletEvent;
}

void BulletEvent::Clear() {
  bulletlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BulletEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFFS.BulletEvent.Bullet bulletList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bulletList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bulletlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bulletList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulletEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFFS.BulletEvent.Bullet bulletList = 1;
  for (int i = 0; i < this->bulletlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bulletlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BulletEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFFS.BulletEvent.Bullet bulletList = 1;
  for (int i = 0; i < this->bulletlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bulletlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BulletEvent::ByteSize() const {
  int total_size = 0;

  // repeated .NFFS.BulletEvent.Bullet bulletList = 1;
  total_size += 1 * this->bulletlist_size();
  for (int i = 0; i < this->bulletlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bulletlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BulletEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BulletEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BulletEvent::MergeFrom(const BulletEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  bulletlist_.MergeFrom(from.bulletlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BulletEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletEvent::CopyFrom(const BulletEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletEvent::IsInitialized() const {

  for (int i = 0; i < bulletlist_size(); i++) {
    if (!this->bulletlist(i).IsInitialized()) return false;
  }
  return true;
}

void BulletEvent::Swap(BulletEvent* other) {
  if (other != this) {
    bulletlist_.Swap(&other->bulletlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BulletEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulletEvent_descriptor_;
  metadata.reflection = BulletEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AudioEvent_Audio::kEventTimeFieldNumber;
const int AudioEvent_Audio::kAudioPrefabNameFieldNumber;
#endif  // !_MSC_VER

AudioEvent_Audio::AudioEvent_Audio()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AudioEvent_Audio::InitAsDefaultInstance() {
}

AudioEvent_Audio::AudioEvent_Audio(const AudioEvent_Audio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AudioEvent_Audio::SharedCtor() {
  _cached_size_ = 0;
  eventtime_ = 0;
  audioprefabname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioEvent_Audio::~AudioEvent_Audio() {
  SharedDtor();
}

void AudioEvent_Audio::SharedDtor() {
  if (audioprefabname_ != &::google::protobuf::internal::kEmptyString) {
    delete audioprefabname_;
  }
  if (this != default_instance_) {
  }
}

void AudioEvent_Audio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioEvent_Audio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioEvent_Audio_descriptor_;
}

const AudioEvent_Audio& AudioEvent_Audio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

AudioEvent_Audio* AudioEvent_Audio::default_instance_ = NULL;

AudioEvent_Audio* AudioEvent_Audio::New() const {
  return new AudioEvent_Audio;
}

void AudioEvent_Audio::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventtime_ = 0;
    if (has_audioprefabname()) {
      if (audioprefabname_ != &::google::protobuf::internal::kEmptyString) {
        audioprefabname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioEvent_Audio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float eventTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eventtime_)));
          set_has_eventtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_audioPrefabName;
        break;
      }

      // required string audioPrefabName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audioPrefabName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audioprefabname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->audioprefabname().data(), this->audioprefabname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AudioEvent_Audio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float eventTime = 1;
  if (has_eventtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eventtime(), output);
  }

  // required string audioPrefabName = 3;
  if (has_audioprefabname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audioprefabname().data(), this->audioprefabname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->audioprefabname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AudioEvent_Audio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float eventTime = 1;
  if (has_eventtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eventtime(), target);
  }

  // required string audioPrefabName = 3;
  if (has_audioprefabname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audioprefabname().data(), this->audioprefabname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->audioprefabname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AudioEvent_Audio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float eventTime = 1;
    if (has_eventtime()) {
      total_size += 1 + 4;
    }

    // required string audioPrefabName = 3;
    if (has_audioprefabname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audioprefabname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioEvent_Audio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioEvent_Audio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioEvent_Audio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioEvent_Audio::MergeFrom(const AudioEvent_Audio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtime()) {
      set_eventtime(from.eventtime());
    }
    if (from.has_audioprefabname()) {
      set_audioprefabname(from.audioprefabname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioEvent_Audio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioEvent_Audio::CopyFrom(const AudioEvent_Audio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioEvent_Audio::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AudioEvent_Audio::Swap(AudioEvent_Audio* other) {
  if (other != this) {
    std::swap(eventtime_, other->eventtime_);
    std::swap(audioprefabname_, other->audioprefabname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioEvent_Audio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioEvent_Audio_descriptor_;
  metadata.reflection = AudioEvent_Audio_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AudioEvent::kAudioListFieldNumber;
#endif  // !_MSC_VER

AudioEvent::AudioEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AudioEvent::InitAsDefaultInstance() {
}

AudioEvent::AudioEvent(const AudioEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AudioEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioEvent::~AudioEvent() {
  SharedDtor();
}

void AudioEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AudioEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioEvent_descriptor_;
}

const AudioEvent& AudioEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

AudioEvent* AudioEvent::default_instance_ = NULL;

AudioEvent* AudioEvent::New() const {
  return new AudioEvent;
}

void AudioEvent::Clear() {
  audiolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFFS.AudioEvent.Audio audioList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audioList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_audiolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_audioList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AudioEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFFS.AudioEvent.Audio audioList = 1;
  for (int i = 0; i < this->audiolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->audiolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AudioEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFFS.AudioEvent.Audio audioList = 1;
  for (int i = 0; i < this->audiolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->audiolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AudioEvent::ByteSize() const {
  int total_size = 0;

  // repeated .NFFS.AudioEvent.Audio audioList = 1;
  total_size += 1 * this->audiolist_size();
  for (int i = 0; i < this->audiolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->audiolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioEvent::MergeFrom(const AudioEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  audiolist_.MergeFrom(from.audiolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioEvent::CopyFrom(const AudioEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioEvent::IsInitialized() const {

  for (int i = 0; i < audiolist_size(); i++) {
    if (!this->audiolist(i).IsInitialized()) return false;
  }
  return true;
}

void AudioEvent::Swap(AudioEvent* other) {
  if (other != this) {
    audiolist_.Swap(&other->audiolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioEvent_descriptor_;
  metadata.reflection = AudioEvent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MoveEvent_METype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveEvent_METype_descriptor_;
}
bool MoveEvent_METype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MoveEvent_METype MoveEvent::ME_FORWARD;
const MoveEvent_METype MoveEvent::ME_BACK;
const MoveEvent_METype MoveEvent::ME_LEFT;
const MoveEvent_METype MoveEvent::ME_RIGHT;
const MoveEvent_METype MoveEvent::METype_MIN;
const MoveEvent_METype MoveEvent::METype_MAX;
const int MoveEvent::METype_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MoveEvent_Move::kEventTimeFieldNumber;
const int MoveEvent_Move::kEventTypeFieldNumber;
const int MoveEvent_Move::kMoveDisFieldNumber;
const int MoveEvent_Move::kMoveTimeFieldNumber;
#endif  // !_MSC_VER

MoveEvent_Move::MoveEvent_Move()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveEvent_Move::InitAsDefaultInstance() {
}

MoveEvent_Move::MoveEvent_Move(const MoveEvent_Move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveEvent_Move::SharedCtor() {
  _cached_size_ = 0;
  eventtime_ = 0;
  eventtype_ = 0;
  movedis_ = 0;
  movetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveEvent_Move::~MoveEvent_Move() {
  SharedDtor();
}

void MoveEvent_Move::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveEvent_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveEvent_Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveEvent_Move_descriptor_;
}

const MoveEvent_Move& MoveEvent_Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

MoveEvent_Move* MoveEvent_Move::default_instance_ = NULL;

MoveEvent_Move* MoveEvent_Move::New() const {
  return new MoveEvent_Move;
}

void MoveEvent_Move::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventtime_ = 0;
    eventtype_ = 0;
    movedis_ = 0;
    movetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveEvent_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float eventTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eventtime_)));
          set_has_eventtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eventType;
        break;
      }

      // required .NFFS.MoveEvent.METype eventType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFFS::MoveEvent_METype_IsValid(value)) {
            set_eventtype(static_cast< ::NFFS::MoveEvent_METype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_moveDis;
        break;
      }

      // required float moveDis = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_moveDis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movedis_)));
          set_has_movedis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_moveTime;
        break;
      }

      // required float moveTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_moveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movetime_)));
          set_has_movetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveEvent_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float eventTime = 1;
  if (has_eventtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eventtime(), output);
  }

  // required .NFFS.MoveEvent.METype eventType = 2;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eventtype(), output);
  }

  // required float moveDis = 3;
  if (has_movedis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->movedis(), output);
  }

  // required float moveTime = 4;
  if (has_movetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->movetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveEvent_Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float eventTime = 1;
  if (has_eventtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eventtime(), target);
  }

  // required .NFFS.MoveEvent.METype eventType = 2;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eventtype(), target);
  }

  // required float moveDis = 3;
  if (has_movedis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->movedis(), target);
  }

  // required float moveTime = 4;
  if (has_movetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->movetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveEvent_Move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float eventTime = 1;
    if (has_eventtime()) {
      total_size += 1 + 4;
    }

    // required .NFFS.MoveEvent.METype eventType = 2;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

    // required float moveDis = 3;
    if (has_movedis()) {
      total_size += 1 + 4;
    }

    // required float moveTime = 4;
    if (has_movetime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveEvent_Move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveEvent_Move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveEvent_Move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveEvent_Move::MergeFrom(const MoveEvent_Move& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtime()) {
      set_eventtime(from.eventtime());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_movedis()) {
      set_movedis(from.movedis());
    }
    if (from.has_movetime()) {
      set_movetime(from.movetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveEvent_Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveEvent_Move::CopyFrom(const MoveEvent_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveEvent_Move::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MoveEvent_Move::Swap(MoveEvent_Move* other) {
  if (other != this) {
    std::swap(eventtime_, other->eventtime_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(movedis_, other->movedis_);
    std::swap(movetime_, other->movetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveEvent_Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveEvent_Move_descriptor_;
  metadata.reflection = MoveEvent_Move_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MoveEvent::kMoveEventFieldNumber;
#endif  // !_MSC_VER

MoveEvent::MoveEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveEvent::InitAsDefaultInstance() {
}

MoveEvent::MoveEvent(const MoveEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveEvent::~MoveEvent() {
  SharedDtor();
}

void MoveEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveEvent_descriptor_;
}

const MoveEvent& MoveEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

MoveEvent* MoveEvent::default_instance_ = NULL;

MoveEvent* MoveEvent::New() const {
  return new MoveEvent;
}

void MoveEvent::Clear() {
  moveevent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFFS.MoveEvent.Move moveEvent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moveEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moveevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_moveEvent;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFFS.MoveEvent.Move moveEvent = 1;
  for (int i = 0; i < this->moveevent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->moveevent(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFFS.MoveEvent.Move moveEvent = 1;
  for (int i = 0; i < this->moveevent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->moveevent(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveEvent::ByteSize() const {
  int total_size = 0;

  // repeated .NFFS.MoveEvent.Move moveEvent = 1;
  total_size += 1 * this->moveevent_size();
  for (int i = 0; i < this->moveevent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moveevent(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveEvent::MergeFrom(const MoveEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  moveevent_.MergeFrom(from.moveevent_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveEvent::CopyFrom(const MoveEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveEvent::IsInitialized() const {

  for (int i = 0; i < moveevent_size(); i++) {
    if (!this->moveevent(i).IsInitialized()) return false;
  }
  return true;
}

void MoveEvent::Swap(MoveEvent* other) {
  if (other != this) {
    moveevent_.Swap(&other->moveevent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveEvent_descriptor_;
  metadata.reflection = MoveEvent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CameraEvent_CEType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraEvent_CEType_descriptor_;
}
bool CameraEvent_CEType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CameraEvent_CEType CameraEvent::Earthquake;
const CameraEvent_CEType CameraEvent::Explosion;
const CameraEvent_CEType CameraEvent::No;
const CameraEvent_CEType CameraEvent::FireKick;
const CameraEvent_CEType CameraEvent::Stomp;
const CameraEvent_CEType CameraEvent::Yes;
const CameraEvent_CEType CameraEvent::SprintShake;
const CameraEvent_CEType CameraEvent::FreeMode;
const CameraEvent_CEType CameraEvent::MainRPGMode;
const CameraEvent_CEType CameraEvent::CEType_MIN;
const CameraEvent_CEType CameraEvent::CEType_MAX;
const int CameraEvent::CEType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CameraEvent_Camera::kEventTimeFieldNumber;
const int CameraEvent_Camera::kEventTypeFieldNumber;
const int CameraEvent_Camera::kAmountParamFieldNumber;
const int CameraEvent_Camera::kShakeTimeFieldNumber;
#endif  // !_MSC_VER

CameraEvent_Camera::CameraEvent_Camera()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraEvent_Camera::InitAsDefaultInstance() {
  amountparam_ = const_cast< ::NFFS::FSVector3*>(&::NFFS::FSVector3::default_instance());
}

CameraEvent_Camera::CameraEvent_Camera(const CameraEvent_Camera& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraEvent_Camera::SharedCtor() {
  _cached_size_ = 0;
  eventtime_ = 0;
  eventtype_ = 0;
  amountparam_ = NULL;
  shaketime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraEvent_Camera::~CameraEvent_Camera() {
  SharedDtor();
}

void CameraEvent_Camera::SharedDtor() {
  if (this != default_instance_) {
    delete amountparam_;
  }
}

void CameraEvent_Camera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraEvent_Camera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraEvent_Camera_descriptor_;
}

const CameraEvent_Camera& CameraEvent_Camera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

CameraEvent_Camera* CameraEvent_Camera::default_instance_ = NULL;

CameraEvent_Camera* CameraEvent_Camera::New() const {
  return new CameraEvent_Camera;
}

void CameraEvent_Camera::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventtime_ = 0;
    eventtype_ = 0;
    if (has_amountparam()) {
      if (amountparam_ != NULL) amountparam_->::NFFS::FSVector3::Clear();
    }
    shaketime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraEvent_Camera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float eventTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eventtime_)));
          set_has_eventtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eventType;
        break;
      }

      // required .NFFS.CameraEvent.CEType eventType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFFS::CameraEvent_CEType_IsValid(value)) {
            set_eventtype(static_cast< ::NFFS::CameraEvent_CEType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_amountParam;
        break;
      }

      // required .NFFS.FSVector3 amountParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amountParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_amountparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_shakeTime;
        break;
      }

      // required float shakeTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shakeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shaketime_)));
          set_has_shaketime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraEvent_Camera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float eventTime = 1;
  if (has_eventtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eventtime(), output);
  }

  // required .NFFS.CameraEvent.CEType eventType = 2;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eventtype(), output);
  }

  // required .NFFS.FSVector3 amountParam = 3;
  if (has_amountparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->amountparam(), output);
  }

  // required float shakeTime = 4;
  if (has_shaketime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->shaketime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraEvent_Camera::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float eventTime = 1;
  if (has_eventtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eventtime(), target);
  }

  // required .NFFS.CameraEvent.CEType eventType = 2;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eventtype(), target);
  }

  // required .NFFS.FSVector3 amountParam = 3;
  if (has_amountparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->amountparam(), target);
  }

  // required float shakeTime = 4;
  if (has_shaketime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->shaketime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraEvent_Camera::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float eventTime = 1;
    if (has_eventtime()) {
      total_size += 1 + 4;
    }

    // required .NFFS.CameraEvent.CEType eventType = 2;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

    // required .NFFS.FSVector3 amountParam = 3;
    if (has_amountparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->amountparam());
    }

    // required float shakeTime = 4;
    if (has_shaketime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraEvent_Camera::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraEvent_Camera* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraEvent_Camera*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraEvent_Camera::MergeFrom(const CameraEvent_Camera& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtime()) {
      set_eventtime(from.eventtime());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_amountparam()) {
      mutable_amountparam()->::NFFS::FSVector3::MergeFrom(from.amountparam());
    }
    if (from.has_shaketime()) {
      set_shaketime(from.shaketime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraEvent_Camera::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraEvent_Camera::CopyFrom(const CameraEvent_Camera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraEvent_Camera::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_amountparam()) {
    if (!this->amountparam().IsInitialized()) return false;
  }
  return true;
}

void CameraEvent_Camera::Swap(CameraEvent_Camera* other) {
  if (other != this) {
    std::swap(eventtime_, other->eventtime_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(amountparam_, other->amountparam_);
    std::swap(shaketime_, other->shaketime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraEvent_Camera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraEvent_Camera_descriptor_;
  metadata.reflection = CameraEvent_Camera_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CameraEvent::kCameraEventListFieldNumber;
#endif  // !_MSC_VER

CameraEvent::CameraEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraEvent::InitAsDefaultInstance() {
}

CameraEvent::CameraEvent(const CameraEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraEvent::~CameraEvent() {
  SharedDtor();
}

void CameraEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraEvent_descriptor_;
}

const CameraEvent& CameraEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

CameraEvent* CameraEvent::default_instance_ = NULL;

CameraEvent* CameraEvent::New() const {
  return new CameraEvent;
}

void CameraEvent::Clear() {
  cameraeventlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFFS.CameraEvent.Camera cameraEventList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraEventList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cameraeventlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cameraEventList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFFS.CameraEvent.Camera cameraEventList = 1;
  for (int i = 0; i < this->cameraeventlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cameraeventlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFFS.CameraEvent.Camera cameraEventList = 1;
  for (int i = 0; i < this->cameraeventlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cameraeventlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraEvent::ByteSize() const {
  int total_size = 0;

  // repeated .NFFS.CameraEvent.Camera cameraEventList = 1;
  total_size += 1 * this->cameraeventlist_size();
  for (int i = 0; i < this->cameraeventlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cameraeventlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraEvent::MergeFrom(const CameraEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  cameraeventlist_.MergeFrom(from.cameraeventlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraEvent::CopyFrom(const CameraEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraEvent::IsInitialized() const {

  for (int i = 0; i < cameraeventlist_size(); i++) {
    if (!this->cameraeventlist(i).IsInitialized()) return false;
  }
  return true;
}

void CameraEvent::Swap(CameraEvent* other) {
  if (other != this) {
    cameraeventlist_.Swap(&other->cameraeventlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraEvent_descriptor_;
  metadata.reflection = CameraEvent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* EnableEvents_EEETYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnableEvents_EEETYPE_descriptor_;
}
bool EnableEvents_EEETYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EnableEvents_EEETYPE EnableEvents::INIT;
const EnableEvents_EEETYPE EnableEvents::FINAL;
const EnableEvents_EEETYPE EnableEvents::EEETYPE_MIN;
const EnableEvents_EEETYPE EnableEvents::EEETYPE_MAX;
const int EnableEvents::EEETYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int EnableEvents_Enable::kEventTimeFieldNumber;
const int EnableEvents_Enable::kEventTypeFieldNumber;
const int EnableEvents_Enable::kTargetNameFieldNumber;
#endif  // !_MSC_VER

EnableEvents_Enable::EnableEvents_Enable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnableEvents_Enable::InitAsDefaultInstance() {
}

EnableEvents_Enable::EnableEvents_Enable(const EnableEvents_Enable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnableEvents_Enable::SharedCtor() {
  _cached_size_ = 0;
  eventtime_ = 0;
  eventtype_ = 0;
  targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnableEvents_Enable::~EnableEvents_Enable() {
  SharedDtor();
}

void EnableEvents_Enable::SharedDtor() {
  if (targetname_ != &::google::protobuf::internal::kEmptyString) {
    delete targetname_;
  }
  if (this != default_instance_) {
  }
}

void EnableEvents_Enable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableEvents_Enable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnableEvents_Enable_descriptor_;
}

const EnableEvents_Enable& EnableEvents_Enable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

EnableEvents_Enable* EnableEvents_Enable::default_instance_ = NULL;

EnableEvents_Enable* EnableEvents_Enable::New() const {
  return new EnableEvents_Enable;
}

void EnableEvents_Enable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventtime_ = 0;
    eventtype_ = 0;
    if (has_targetname()) {
      if (targetname_ != &::google::protobuf::internal::kEmptyString) {
        targetname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnableEvents_Enable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float eventTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eventtime_)));
          set_has_eventtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eventType;
        break;
      }

      // required .NFFS.EnableEvents.EEETYPE eventType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFFS::EnableEvents_EEETYPE_IsValid(value)) {
            set_eventtype(static_cast< ::NFFS::EnableEvents_EEETYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_targetName;
        break;
      }

      // required string targetName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetname().data(), this->targetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnableEvents_Enable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float eventTime = 1;
  if (has_eventtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eventtime(), output);
  }

  // required .NFFS.EnableEvents.EEETYPE eventType = 2;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eventtype(), output);
  }

  // required string targetName = 3;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->targetname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnableEvents_Enable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float eventTime = 1;
  if (has_eventtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eventtime(), target);
  }

  // required .NFFS.EnableEvents.EEETYPE eventType = 2;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eventtype(), target);
  }

  // required string targetName = 3;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->targetname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnableEvents_Enable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float eventTime = 1;
    if (has_eventtime()) {
      total_size += 1 + 4;
    }

    // required .NFFS.EnableEvents.EEETYPE eventType = 2;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

    // required string targetName = 3;
    if (has_targetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableEvents_Enable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnableEvents_Enable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnableEvents_Enable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnableEvents_Enable::MergeFrom(const EnableEvents_Enable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtime()) {
      set_eventtime(from.eventtime());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_targetname()) {
      set_targetname(from.targetname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnableEvents_Enable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableEvents_Enable::CopyFrom(const EnableEvents_Enable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableEvents_Enable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EnableEvents_Enable::Swap(EnableEvents_Enable* other) {
  if (other != this) {
    std::swap(eventtime_, other->eventtime_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(targetname_, other->targetname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnableEvents_Enable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnableEvents_Enable_descriptor_;
  metadata.reflection = EnableEvents_Enable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int EnableEvents::kEnableListFieldNumber;
#endif  // !_MSC_VER

EnableEvents::EnableEvents()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnableEvents::InitAsDefaultInstance() {
}

EnableEvents::EnableEvents(const EnableEvents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnableEvents::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnableEvents::~EnableEvents() {
  SharedDtor();
}

void EnableEvents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnableEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableEvents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnableEvents_descriptor_;
}

const EnableEvents& EnableEvents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

EnableEvents* EnableEvents::default_instance_ = NULL;

EnableEvents* EnableEvents::New() const {
  return new EnableEvents;
}

void EnableEvents::Clear() {
  enablelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnableEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFFS.EnableEvents.Enable enableList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enableList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enablelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_enableList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnableEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFFS.EnableEvents.Enable enableList = 1;
  for (int i = 0; i < this->enablelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->enablelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnableEvents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFFS.EnableEvents.Enable enableList = 1;
  for (int i = 0; i < this->enablelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->enablelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnableEvents::ByteSize() const {
  int total_size = 0;

  // repeated .NFFS.EnableEvents.Enable enableList = 1;
  total_size += 1 * this->enablelist_size();
  for (int i = 0; i < this->enablelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enablelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableEvents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnableEvents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnableEvents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnableEvents::MergeFrom(const EnableEvents& from) {
  GOOGLE_CHECK_NE(&from, this);
  enablelist_.MergeFrom(from.enablelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnableEvents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableEvents::CopyFrom(const EnableEvents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableEvents::IsInitialized() const {

  for (int i = 0; i < enablelist_size(); i++) {
    if (!this->enablelist(i).IsInitialized()) return false;
  }
  return true;
}

void EnableEvents::Swap(EnableEvents* other) {
  if (other != this) {
    enablelist_.Swap(&other->enablelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnableEvents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnableEvents_descriptor_;
  metadata.reflection = EnableEvents_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GlobalSpeed_EGSTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalSpeed_EGSTYPE_descriptor_;
}
bool GlobalSpeed_EGSTYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GlobalSpeed_EGSTYPE GlobalSpeed::INIT;
const GlobalSpeed_EGSTYPE GlobalSpeed::FINAL;
const GlobalSpeed_EGSTYPE GlobalSpeed::EGSTYPE_MIN;
const GlobalSpeed_EGSTYPE GlobalSpeed::EGSTYPE_MAX;
const int GlobalSpeed::EGSTYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GlobalSpeed_Speed::kEventTimeFieldNumber;
const int GlobalSpeed_Speed::kEventTypeFieldNumber;
const int GlobalSpeed_Speed::kSpeedValueFieldNumber;
#endif  // !_MSC_VER

GlobalSpeed_Speed::GlobalSpeed_Speed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalSpeed_Speed::InitAsDefaultInstance() {
}

GlobalSpeed_Speed::GlobalSpeed_Speed(const GlobalSpeed_Speed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalSpeed_Speed::SharedCtor() {
  _cached_size_ = 0;
  eventtime_ = 0;
  eventtype_ = 0;
  speedvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalSpeed_Speed::~GlobalSpeed_Speed() {
  SharedDtor();
}

void GlobalSpeed_Speed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalSpeed_Speed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalSpeed_Speed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalSpeed_Speed_descriptor_;
}

const GlobalSpeed_Speed& GlobalSpeed_Speed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

GlobalSpeed_Speed* GlobalSpeed_Speed::default_instance_ = NULL;

GlobalSpeed_Speed* GlobalSpeed_Speed::New() const {
  return new GlobalSpeed_Speed;
}

void GlobalSpeed_Speed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventtime_ = 0;
    eventtype_ = 0;
    speedvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalSpeed_Speed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float eventTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eventtime_)));
          set_has_eventtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eventType;
        break;
      }

      // required .NFFS.GlobalSpeed.EGSTYPE eventType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFFS::GlobalSpeed_EGSTYPE_IsValid(value)) {
            set_eventtype(static_cast< ::NFFS::GlobalSpeed_EGSTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_speedValue;
        break;
      }

      // required float speedValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speedValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speedvalue_)));
          set_has_speedvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalSpeed_Speed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float eventTime = 1;
  if (has_eventtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eventtime(), output);
  }

  // required .NFFS.GlobalSpeed.EGSTYPE eventType = 2;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eventtype(), output);
  }

  // required float speedValue = 3;
  if (has_speedvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speedvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalSpeed_Speed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float eventTime = 1;
  if (has_eventtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eventtime(), target);
  }

  // required .NFFS.GlobalSpeed.EGSTYPE eventType = 2;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eventtype(), target);
  }

  // required float speedValue = 3;
  if (has_speedvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speedvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalSpeed_Speed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float eventTime = 1;
    if (has_eventtime()) {
      total_size += 1 + 4;
    }

    // required .NFFS.GlobalSpeed.EGSTYPE eventType = 2;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

    // required float speedValue = 3;
    if (has_speedvalue()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalSpeed_Speed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalSpeed_Speed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalSpeed_Speed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalSpeed_Speed::MergeFrom(const GlobalSpeed_Speed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtime()) {
      set_eventtime(from.eventtime());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_speedvalue()) {
      set_speedvalue(from.speedvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalSpeed_Speed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalSpeed_Speed::CopyFrom(const GlobalSpeed_Speed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSpeed_Speed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GlobalSpeed_Speed::Swap(GlobalSpeed_Speed* other) {
  if (other != this) {
    std::swap(eventtime_, other->eventtime_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(speedvalue_, other->speedvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalSpeed_Speed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalSpeed_Speed_descriptor_;
  metadata.reflection = GlobalSpeed_Speed_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GlobalSpeed::kSpeedListFieldNumber;
#endif  // !_MSC_VER

GlobalSpeed::GlobalSpeed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalSpeed::InitAsDefaultInstance() {
}

GlobalSpeed::GlobalSpeed(const GlobalSpeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalSpeed::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalSpeed::~GlobalSpeed() {
  SharedDtor();
}

void GlobalSpeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalSpeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalSpeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalSpeed_descriptor_;
}

const GlobalSpeed& GlobalSpeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFFleetingDefine_2eproto();
  return *default_instance_;
}

GlobalSpeed* GlobalSpeed::default_instance_ = NULL;

GlobalSpeed* GlobalSpeed::New() const {
  return new GlobalSpeed;
}

void GlobalSpeed::Clear() {
  speedlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFFS.GlobalSpeed.Speed speedList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speedList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speedlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_speedList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFFS.GlobalSpeed.Speed speedList = 1;
  for (int i = 0; i < this->speedlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->speedlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalSpeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFFS.GlobalSpeed.Speed speedList = 1;
  for (int i = 0; i < this->speedlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->speedlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalSpeed::ByteSize() const {
  int total_size = 0;

  // repeated .NFFS.GlobalSpeed.Speed speedList = 1;
  total_size += 1 * this->speedlist_size();
  for (int i = 0; i < this->speedlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speedlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalSpeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalSpeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalSpeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalSpeed::MergeFrom(const GlobalSpeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  speedlist_.MergeFrom(from.speedlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalSpeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalSpeed::CopyFrom(const GlobalSpeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSpeed::IsInitialized() const {

  for (int i = 0; i < speedlist_size(); i++) {
    if (!this->speedlist(i).IsInitialized()) return false;
  }
  return true;
}

void GlobalSpeed::Swap(GlobalSpeed* other) {
  if (other != this) {
    speedlist_.Swap(&other->speedlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalSpeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalSpeed_descriptor_;
  metadata.reflection = GlobalSpeed_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFFS

// @@protoc_insertion_point(global_scope)

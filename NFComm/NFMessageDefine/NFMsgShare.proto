package NFMsg; 

import "NFDefine.proto";
import "NFMsgBase.proto";


//除 去基础对象身上的属性外，这里全部游戏中的逻辑协议

message ReqEnterGameServer
{
	required Ident 		id = 1;
	required bytes 		account = 2;
    required int32 		game_id = 3;
	required bytes 		name = 4;
}

message ReqAckEnterGameSuccess
{
    required int32 		arg = 1;
}

message ReqHeartBeat
{
    required int32 		arg = 1;
}

message ReqLeaveGameServer
{
    required int32 		arg = 1;
}

message PlayerEntryInfo//对象出现基本信息
{
	required Ident	object_guid = 1;
	required float	x = 2;
	required float	y = 3;
	required float	z = 4;
	required int32	career_type = 5;
	required int32	player_state = 6;
	required bytes  config_id = 7;
	required int32  scene_id = 8;
	required bytes  class_id = 9;
}

message AckPlayerEntryList//对象出现列表
{
	repeated PlayerEntryInfo object_list = 1;
}

message AckPlayerLeaveList//对象离去列表
{
	repeated Ident 	object_list = 1;
}

message ReqAckSynData//message sysn
{
	enum SynType
	{
		EST_GROUP = 1;	//层
		EST_SCENE = 2;	//场景
		EST_GUILD = 3;	//公会
		EST_FRIEND = 4;	//好友
	}
	required Ident 		syser = 1;
	repeated Ident 		object_list = 2;
	required bytes  	data = 3;
	required SynType  	syn_type = 4;
	required ESynMsgID	msg_id = 5;//有消息ID限制
}


////////////////////////////////////////////////////////////////////////////////////////////////////
message ReqAckPlayerMove
{
	required Ident 	mover = 1;
	required int32  moveType = 2;//future_state
	required float speed = 3;
	required int32 time = 4;
	required int32 lastState = 5;
	repeated Vector3 target_pos = 6;
	repeated Vector3 source_pos = 7;
	repeated Vector3 move_direction = 8;
}
		
message ReqAckPlayerChat
{
	enum EGameChatType
	{
		EGCT_GUILD = 0;
		EGCT_PRIVATE = 1;
		EGCT_TEAM = 2;
		EGCT_WORLD = 3;
	}
	
	message ChatContainer
	{
		enum ContainerType
		{
			EGCT_ITEM = 1;	//道具
		}
	
		required int32 ConTainerType = 2;
		required bytes data_info = 3;
	}


	required Ident	chat_id = 1;
	required EGameChatType  chat_type = 2;
	required bytes chat_info = 3;
	required bytes chat_name = 4;
	optional Ident	target_id = 5;
	repeated ChatContainer Container_data = 6;
}

////////////////////////////

message EffectData
{
	enum EResultType
	{
		EET_FAIL = 0;
		EET_SUCCESS = 1;
		EET_REFUSE = 2;
		EET_MISS = 3;	
		EET_CRIT = 4;	
	}
	required Ident 			effect_ident = 1;
	required int32  		effect_value = 2;
	required EResultType  	effect_rlt = 3;
}

message ReqAckUseSkill
{
	required Ident 	user = 1;
	required bytes skill_id = 2;
	required int32  use_index = 3;//因为客户端要先展示
	repeated EffectData 	effect_data = 4;
}

message ReqAckUseItem
{
	required Ident 	user = 1;
	required Ident item_guid	= 2;
	repeated EffectData 	effect_data = 3;
	required ItemStruct 	item = 4;
	required Ident 			targetid = 5;
	required Vector3 		position = 6;
}

/////////////////////////////////////////
//EGMI_REQ_SWAP_SCENE
message ReqAckSwapScene
{
	enum EGameSwapType
	{
		EGST_NARMAL = 0;//普通城镇传送
		EGST_CLONE = 1;//普通副本
		EGST_ARENA = 2;//竞技场
		EGST_MIRROR = 3;//镜像空间
	}

	required EGameSwapType		transfer_type = 1;
	required int32		scene_id = 2;
	required int32		line_id = 3;
	optional float 		x = 4;
	optional float 		y = 5;
	optional float 		z = 6;
	optional bytes 	data = 7;
}
//EGMI_REQ_SWAP_HOME_SCENE
message ReqAckHomeScene
{
	optional bytes 	data = 1;
}

message ItemStruct
{
    required bytes item_id            = 1; // 配置ID
    required int32 item_count          = 2; // 数量
}

message CurrencyStruct
{
    required int32 currency_type        = 1;// 金币，钻石，体力等等东西的类型
    required int32 currency_count       = 2;// 数量
}

//EGMI_REQ_START_OPPNENT						= 1220;
//EGMI_ACK_START_OPPNENT						= 1221;
message ReqAckStartBattle
{
    required int32 gold            = 1; // 金币
    required int32 diamond          = 2; //
}

//EGMI_REQ_END_OPPNENT
message ReqEndBattle
{
}

//EGMI_ACK_END_OPPNENT
message AckEndBattle
{
	//下发的时候则为道具列表
	//获得的金币等列表
    required int32 win            	= 1; //
    required int32 star            	= 2; //
    required int32 gold            	= 3; // 副本获得的金币
    required int32 exp              = 4; // 副本获得的经验
    required int32 diamond          = 5; // 副本获得的zhuanshi
    repeated ItemStruct item_list   = 6; // 副本获得的道具列表
}


message ReqPickDropItem//拾取物品
{
	required Ident item_guid = 2;
}

message ReqAcceptTask//接受任务
{
	required bytes task_id = 1;
}

message ReqCompeleteTask//完成任务后申请领奖
{
	required bytes task_id = 1;
}

///////////////战斗/////////////////////////////////////////////////////////////////////////////////////

message ReqAckJoinActivity
{
	enum EGameActivityType
	{
		EGAT_PVP = 0;//普通PVP对战活动
	}
	
	enum EGameActivitySubType
	{
		EGAT_NORMAL = 0;//普通难度
	}
    required EGameActivityType		activity_type = 1;
    required EGameActivitySubType	sub_activity_type = 2;
}


///////////////工会/////////////////////////////////////////////////////////////////////////////////////
//EGMI_REQ_CREATE_GUILD                       = 300; // 申请创建公会 EGMI_ACK_CREATE_GUILD						= 301; // 创建公会结果
message ReqAckCreateGuild
{
    required Ident		guild_id = 1;
    required bytes 		guild_name = 2;
}
//EGMI_REQ_SEARCH_GUILD                       = 308; // 申请搜索公会
message ReqSearchGuild
{
    required bytes 		guild_name = 1;
}
//EGMI_ACK_SEARCH_GUILD                       = 309; // 返回搜索公会
message AckSearchGuild
{
	message SearchGuildObject
	{
		required Ident		guild_ID 	= 1;
		required bytes		guild_name 	= 2;
		required bytes		guild_icon 	= 3;
		required int32		guild_member_count 	= 4;
		required int32		guild_member_max_count 	= 5;
		required int32		guild_honor 	= 6;
		required int32		guild_rank 	= 7;
	}
	
	repeated SearchGuildObject guild_list = 1;
}
//EGMI_REQ_JOIN_GUILD                         = 302; // 申请加入公会 EGMI_ACK_JOIN_GUILD							= 303; // 加入公会结果
message ReqAckJoinGuild
{
    required Ident		guild_id = 1;
    required bytes		guild_name = 2;
}
//EGMI_ACK_LEAVE_GUILD						= 305; // 离开公会结果 
message ReqAckLeaveGuild
{
    required Ident		guild_id = 1;
    required bytes		guild_name = 2;
}


//操作成员 EGMI_REQ_OPR_GUILD                        	= 306; // 申请成员操作 EGMI_ACK_OPR_GUILD                        	= 307; // 成员操作结果
message ReqAckOprGuildMember
{
	enum EGGuildMemberOprType
	{
		EGAT_DOWN = 0;
		EGAT_UP = 1;
		EGAT_KICK = 2;
	}
    required Ident						guild_id = 1;
    required Ident						member_id = 2;//被操作的ID
    required EGGuildMemberOprType		type = 3;
}


//EGMI_ReqEnterGuildEctype					= 315; // 
message ReqEnterGuildEctype
{	
	required Ident		guild_id				= 1;
}

//EGEC_REQ_SET_FIGHT_HERO						= 508;		 // 战斗武将
message ReqSetFightHero
{	
	required Ident		Heroid				= 1;//
	required int32		Set	    			= 2;//0,1,2
}

//EGEC_REQ_SWITCH_FIGHT_HERO						= 508;		 // 战斗武将
message ReqSwitchFightHero
{
	required Ident		Heroid				= 1;
}

//EGMI_REQ_BUY_FORM_SHOP
message ReqBuyItemFromShop
{
	required bytes		itemID				= 1;
	required int32		count				= 2;
}

//EGMI_REQ_ADD_GAMBLE_VALUE
message ReqAddGambleValue
{
	required bytes		property				= 1;
	required int32		number				= 2;
}
////////////////////////////////////////////////////////////////////////////////////////////////////

//EGEC_REQ_MINING_TITLE							= 1600;		 // 挖矿
message ReqMiningTitle
{	
	required int32		x				= 1;//
	required int32		y				= 2;//
	required int32		opr 			= 3;//
}

message TileState
{
	required int32		x				= 1;//
	required int32		y				= 2;//
	required int32		opr 			= 3;//0:rem;1:add
}

message TileBuilding
{
	required int32		x				= 1;//
	required int32		y				= 2;//
	required bytes		configID 		= 3;
	required Ident		guid 			= 4;
	
}

message TileNPC
{
	required int32		x				= 1;//
	required int32		y				= 2;//
	required bytes		configID 		= 3;//
	required Ident		guid 			= 4;//
}

//EGEC_ACK_MINING_TITLE
message AckMiningTitle
{	
	repeated TileState		tile			= 1;//
	repeated TileBuilding	building		= 2;//
	repeated TileNPC		npc				= 3;//
}

//EGMI_REQ_SEARCH_OPPNENT
message ReqSearchOppnent
{
}

//EGMI_ACK_SEARCH_OPPNENT
message AckSearchOppnent
{
    required int32		scene_id = 1;
}


//EGEC_REQ_SEND_MAIL = 700; // 发送邮件
message ReqSendMail
{
    required Ident      reciever            = 1; // 目标ID
    repeated ItemStruct item_list           = 2; // 
    repeated CurrencyStruct currency_list   = 3;
}

//EGEC_REQSWICHSERVER							= 210;		 // 申请转服
message ReqSwitchServer
{
	required Ident      selfid              	= 1; // 角色ID
	required int64      self_serverid		= 2; // 本来所在的服务器
	required int64      target_serverid		= 3; // 目标ID
	required int64      gate_serverid		= 4; // 目标ID
	required int64      SceneID			= 5; // 
	required Ident      client_id			= 6; // 客户端id
	required int64      groupID			= 7; //  group
}

//EGEC_ACKSWICHSERVER							= 211;		 // 申请转服
message AckSwitchServer
{
	required Ident      selfid              	= 1; // 角色ID
	required int64      self_serverid		= 2; // 目标ID
	required int64      target_serverid		= 3; // 目标ID
	required int64      gate_serverid		= 4; // 目标ID
}

/////////////////////////pvp--///////////////////////////////////////////////////////////////////////////
message PVPRoomInfo
{
	required int32 nCellStatus				= 1;	// 状态
	required Ident RoomID					= 2;	// 房间ID
	required int32 nPVPMode					= 3;	// 匹配模式
	required int32 nPVPGrade				= 4;	// 房间所在的阶段
	required int32 MaxPalyer				= 5;			
	repeated Ident xRedPlayer				= 6;
	repeated Ident xBluePlayer				= 7;
	optional int64      serverid			= 8; // 房间副本所在的serverid	
	optional int64      SceneID				= 9; // 房间副本所在的场景id	
	optional int64      groupID				= 10; // 房间副本所在的层
}

//EGMI_REQ_PVPAPPLYMACTCH						= 1100; 	// 申请匹配pvp
message ReqPVPApplyMatch
{	
	enum EApplyType
	{
		EApplyType_Single				=0; // 个人匹配
		EApplyType_Team					=1; // 队伍匹配
	};
	
    required Ident	self_id 				= 1;//
	required int32	nPVPMode				= 2;	// 匹配模式
	optional int64 	score					= 3;	// 分数
	required int32	ApplyType 				= 4;	// 匹配方式，队伍申请还是个人申请
	optional Ident	team_id 				= 5;	// 队伍ID 
}

//EGMI_ACK_PVPAPPLYMACTCH						= 1101; 	// 返回匹配pvp
message AckPVPApplyMatch
{	
    required Ident						self_id = 1;//
	optional PVPRoomInfo				xRoomInfo = 2;
	required int32	ApplyType 				= 3;	// 匹配方式，队伍申请还是个人申请
	required int32	nResult 					= 4;	// 匹配的结果
}

//EGMI_REQ_CREATEPVPECTYPE					= 1102; 	// 申请pvp副本
message ReqCreatePVPEctype
{	
    required Ident						self_id = 1;//
	required PVPRoomInfo				xRoomInfo = 2;
}

//EGMI_ACK_CREATEPVPECTYPE					= 1103; 	// 返回pvp副本的信息，并拉人
message AckCreatePVPEctype
{	
    required Ident	self_id 				= 1;//
	required PVPRoomInfo	xRoomInfo 		= 2;
	required int32	ApplyType 				= 3;	// 匹配方式，队伍申请还是个人申请
}

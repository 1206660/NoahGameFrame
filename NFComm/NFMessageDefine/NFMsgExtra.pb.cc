// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgExtra.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NFMsgExtra.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NFMsg {

namespace {

const ::google::protobuf::Descriptor* TeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeammemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeammemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckCreateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckCreateTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckJoinTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckJoinTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckLeaveTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckLeaveTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckOprTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckOprTeamMember_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckOprTeamMember_EGTeamMemberOprType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckInviteTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckInviteTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTeamEnterEctype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTeamEnterEctype_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckTeamEnterEctype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckTeamEnterEctype_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridGuildBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridGuildBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBigMapGridInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBigMapGridInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigMapGridBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigMapGridBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigMapLeaveMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigMapLeaveMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigMapWarHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigMapWarHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigMapGridDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigMapGridDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBigMapGridInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBigMapGridInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBigMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBigMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBigMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBigMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHoldMapGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHoldMapGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckHoldMapGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckHoldMapGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLeaveMapMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLeaveMapMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLeaveMapMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLeaveMapMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetMapAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetMapAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGetMapAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGetMapAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMapHunting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMapHunting_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckMapHunting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckMapHunting_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMapKingWar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMapKingWar_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckMapKingWar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckMapKingWar_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NFMsgExtra_2eproto() {
  protobuf_AddDesc_NFMsgExtra_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NFMsgExtra.proto");
  GOOGLE_CHECK(file != NULL);
  TeamInfo_descriptor_ = file->message_type(0);
  static const int TeamInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, captain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, teammemberinfo_),
  };
  TeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfo_descriptor_,
      TeamInfo::default_instance_,
      TeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfo));
  TeammemberInfo_descriptor_ = file->message_type(1);
  static const int TeammemberInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, nlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, headicon_),
  };
  TeammemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeammemberInfo_descriptor_,
      TeammemberInfo::default_instance_,
      TeammemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeammemberInfo));
  ReqAckCreateTeam_descriptor_ = file->message_type(2);
  static const int ReqAckCreateTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateTeam, xteaminfo_),
  };
  ReqAckCreateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckCreateTeam_descriptor_,
      ReqAckCreateTeam::default_instance_,
      ReqAckCreateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckCreateTeam));
  ReqAckJoinTeam_descriptor_ = file->message_type(3);
  static const int ReqAckJoinTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinTeam, xteaminfo_),
  };
  ReqAckJoinTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckJoinTeam_descriptor_,
      ReqAckJoinTeam::default_instance_,
      ReqAckJoinTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckJoinTeam));
  ReqAckLeaveTeam_descriptor_ = file->message_type(4);
  static const int ReqAckLeaveTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveTeam, xteaminfo_),
  };
  ReqAckLeaveTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckLeaveTeam_descriptor_,
      ReqAckLeaveTeam::default_instance_,
      ReqAckLeaveTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckLeaveTeam));
  ReqAckOprTeamMember_descriptor_ = file->message_type(5);
  static const int ReqAckOprTeamMember_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, xteaminfo_),
  };
  ReqAckOprTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckOprTeamMember_descriptor_,
      ReqAckOprTeamMember::default_instance_,
      ReqAckOprTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckOprTeamMember));
  ReqAckOprTeamMember_EGTeamMemberOprType_descriptor_ = ReqAckOprTeamMember_descriptor_->enum_type(0);
  ReqAckInviteTeam_descriptor_ = file->message_type(6);
  static const int ReqAckInviteTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckInviteTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckInviteTeam, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckInviteTeam, invite_target_id_),
  };
  ReqAckInviteTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckInviteTeam_descriptor_,
      ReqAckInviteTeam::default_instance_,
      ReqAckInviteTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckInviteTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckInviteTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckInviteTeam));
  ReqTeamEnterEctype_descriptor_ = file->message_type(7);
  static const int ReqTeamEnterEctype_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, nectypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, ngroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, nresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, nserverid_),
  };
  ReqTeamEnterEctype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTeamEnterEctype_descriptor_,
      ReqTeamEnterEctype::default_instance_,
      ReqTeamEnterEctype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTeamEnterEctype));
  AckTeamEnterEctype_descriptor_ = file->message_type(8);
  static const int AckTeamEnterEctype_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, nectypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, ngroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, nresult_),
  };
  AckTeamEnterEctype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckTeamEnterEctype_descriptor_,
      AckTeamEnterEctype::default_instance_,
      AckTeamEnterEctype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckTeamEnterEctype));
  GridGuildBaseInfo_descriptor_ = file->message_type(9);
  static const int GridGuildBaseInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, icon_),
  };
  GridGuildBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridGuildBaseInfo_descriptor_,
      GridGuildBaseInfo::default_instance_,
      GridGuildBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridGuildBaseInfo));
  ReqBigMapGridInfo_descriptor_ = file->message_type(10);
  static const int ReqBigMapGridInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBigMapGridInfo, map_title_id_),
  };
  ReqBigMapGridInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBigMapGridInfo_descriptor_,
      ReqBigMapGridInfo::default_instance_,
      ReqBigMapGridInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBigMapGridInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBigMapGridInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBigMapGridInfo));
  BigMapGridBaseInfo_descriptor_ = file->message_type(11);
  static const int BigMapGridBaseInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, guild_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, kingwar_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, kingwarrer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, hurting_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, hurter_),
  };
  BigMapGridBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BigMapGridBaseInfo_descriptor_,
      BigMapGridBaseInfo::default_instance_,
      BigMapGridBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BigMapGridBaseInfo));
  BigMapLeaveMsg_descriptor_ = file->message_type(12);
  static const int BigMapLeaveMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, owner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, msg_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, msg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, owner_level_),
  };
  BigMapLeaveMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BigMapLeaveMsg_descriptor_,
      BigMapLeaveMsg::default_instance_,
      BigMapLeaveMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BigMapLeaveMsg));
  BigMapWarHistory_descriptor_ = file->message_type(13);
  static const int BigMapWarHistory_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, red_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, blue_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, winner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, war_time_),
  };
  BigMapWarHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BigMapWarHistory_descriptor_,
      BigMapWarHistory::default_instance_,
      BigMapWarHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BigMapWarHistory));
  BigMapGridDetailInfo_descriptor_ = file->message_type(14);
  static const int BigMapGridDetailInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, grid_base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, stay_guid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, leave_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, war_history_),
  };
  BigMapGridDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BigMapGridDetailInfo_descriptor_,
      BigMapGridDetailInfo::default_instance_,
      BigMapGridDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BigMapGridDetailInfo));
  AckBigMapGridInfo_descriptor_ = file->message_type(15);
  static const int AckBigMapGridInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapGridInfo, map_data_),
  };
  AckBigMapGridInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBigMapGridInfo_descriptor_,
      AckBigMapGridInfo::default_instance_,
      AckBigMapGridInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapGridInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapGridInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBigMapGridInfo));
  ReqBigMapInfo_descriptor_ = file->message_type(16);
  static const int ReqBigMapInfo_offsets_[1] = {
  };
  ReqBigMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBigMapInfo_descriptor_,
      ReqBigMapInfo::default_instance_,
      ReqBigMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBigMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBigMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBigMapInfo));
  AckBigMapInfo_descriptor_ = file->message_type(17);
  static const int AckBigMapInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapInfo, grid_base_info_),
  };
  AckBigMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBigMapInfo_descriptor_,
      AckBigMapInfo::default_instance_,
      AckBigMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBigMapInfo));
  ReqHoldMapGrid_descriptor_ = file->message_type(18);
  static const int ReqHoldMapGrid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoldMapGrid, map_title_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoldMapGrid, guild_id_),
  };
  ReqHoldMapGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHoldMapGrid_descriptor_,
      ReqHoldMapGrid::default_instance_,
      ReqHoldMapGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoldMapGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoldMapGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHoldMapGrid));
  AckHoldMapGrid_descriptor_ = file->message_type(19);
  static const int AckHoldMapGrid_offsets_[1] = {
  };
  AckHoldMapGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckHoldMapGrid_descriptor_,
      AckHoldMapGrid::default_instance_,
      AckHoldMapGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoldMapGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoldMapGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckHoldMapGrid));
  ReqLeaveMapMsg_descriptor_ = file->message_type(20);
  static const int ReqLeaveMapMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveMapMsg, map_title_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveMapMsg, leave_msg_),
  };
  ReqLeaveMapMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLeaveMapMsg_descriptor_,
      ReqLeaveMapMsg::default_instance_,
      ReqLeaveMapMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveMapMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveMapMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLeaveMapMsg));
  AckLeaveMapMsg_descriptor_ = file->message_type(21);
  static const int AckLeaveMapMsg_offsets_[1] = {
  };
  AckLeaveMapMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLeaveMapMsg_descriptor_,
      AckLeaveMapMsg::default_instance_,
      AckLeaveMapMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLeaveMapMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLeaveMapMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLeaveMapMsg));
  ReqGetMapAward_descriptor_ = file->message_type(22);
  static const int ReqGetMapAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMapAward, map_title_id_),
  };
  ReqGetMapAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetMapAward_descriptor_,
      ReqGetMapAward::default_instance_,
      ReqGetMapAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMapAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMapAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetMapAward));
  AckGetMapAward_descriptor_ = file->message_type(23);
  static const int AckGetMapAward_offsets_[1] = {
  };
  AckGetMapAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGetMapAward_descriptor_,
      AckGetMapAward::default_instance_,
      AckGetMapAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetMapAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetMapAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGetMapAward));
  ReqMapHunting_descriptor_ = file->message_type(24);
  static const int ReqMapHunting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapHunting, map_title_id_),
  };
  ReqMapHunting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMapHunting_descriptor_,
      ReqMapHunting::default_instance_,
      ReqMapHunting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapHunting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapHunting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMapHunting));
  AckMapHunting_descriptor_ = file->message_type(25);
  static const int AckMapHunting_offsets_[1] = {
  };
  AckMapHunting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckMapHunting_descriptor_,
      AckMapHunting::default_instance_,
      AckMapHunting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMapHunting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMapHunting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckMapHunting));
  ReqMapKingWar_descriptor_ = file->message_type(26);
  static const int ReqMapKingWar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapKingWar, map_title_),
  };
  ReqMapKingWar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMapKingWar_descriptor_,
      ReqMapKingWar::default_instance_,
      ReqMapKingWar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapKingWar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapKingWar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMapKingWar));
  AckMapKingWar_descriptor_ = file->message_type(27);
  static const int AckMapKingWar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMapKingWar, map_title_),
  };
  AckMapKingWar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckMapKingWar_descriptor_,
      AckMapKingWar::default_instance_,
      AckMapKingWar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMapKingWar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMapKingWar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckMapKingWar));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NFMsgExtra_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfo_descriptor_, &TeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeammemberInfo_descriptor_, &TeammemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckCreateTeam_descriptor_, &ReqAckCreateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckJoinTeam_descriptor_, &ReqAckJoinTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckLeaveTeam_descriptor_, &ReqAckLeaveTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckOprTeamMember_descriptor_, &ReqAckOprTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckInviteTeam_descriptor_, &ReqAckInviteTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTeamEnterEctype_descriptor_, &ReqTeamEnterEctype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckTeamEnterEctype_descriptor_, &AckTeamEnterEctype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridGuildBaseInfo_descriptor_, &GridGuildBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBigMapGridInfo_descriptor_, &ReqBigMapGridInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BigMapGridBaseInfo_descriptor_, &BigMapGridBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BigMapLeaveMsg_descriptor_, &BigMapLeaveMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BigMapWarHistory_descriptor_, &BigMapWarHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BigMapGridDetailInfo_descriptor_, &BigMapGridDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBigMapGridInfo_descriptor_, &AckBigMapGridInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBigMapInfo_descriptor_, &ReqBigMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBigMapInfo_descriptor_, &AckBigMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHoldMapGrid_descriptor_, &ReqHoldMapGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckHoldMapGrid_descriptor_, &AckHoldMapGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLeaveMapMsg_descriptor_, &ReqLeaveMapMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLeaveMapMsg_descriptor_, &AckLeaveMapMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetMapAward_descriptor_, &ReqGetMapAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGetMapAward_descriptor_, &AckGetMapAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMapHunting_descriptor_, &ReqMapHunting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckMapHunting_descriptor_, &AckMapHunting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMapKingWar_descriptor_, &ReqMapKingWar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckMapKingWar_descriptor_, &AckMapKingWar::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NFMsgExtra_2eproto() {
  delete TeamInfo::default_instance_;
  delete TeamInfo_reflection_;
  delete TeammemberInfo::default_instance_;
  delete TeammemberInfo_reflection_;
  delete ReqAckCreateTeam::default_instance_;
  delete ReqAckCreateTeam_reflection_;
  delete ReqAckJoinTeam::default_instance_;
  delete ReqAckJoinTeam_reflection_;
  delete ReqAckLeaveTeam::default_instance_;
  delete ReqAckLeaveTeam_reflection_;
  delete ReqAckOprTeamMember::default_instance_;
  delete ReqAckOprTeamMember_reflection_;
  delete ReqAckInviteTeam::default_instance_;
  delete ReqAckInviteTeam_reflection_;
  delete ReqTeamEnterEctype::default_instance_;
  delete ReqTeamEnterEctype_reflection_;
  delete AckTeamEnterEctype::default_instance_;
  delete AckTeamEnterEctype_reflection_;
  delete GridGuildBaseInfo::default_instance_;
  delete GridGuildBaseInfo_reflection_;
  delete ReqBigMapGridInfo::default_instance_;
  delete ReqBigMapGridInfo_reflection_;
  delete BigMapGridBaseInfo::default_instance_;
  delete BigMapGridBaseInfo_reflection_;
  delete BigMapLeaveMsg::default_instance_;
  delete BigMapLeaveMsg_reflection_;
  delete BigMapWarHistory::default_instance_;
  delete BigMapWarHistory_reflection_;
  delete BigMapGridDetailInfo::default_instance_;
  delete BigMapGridDetailInfo_reflection_;
  delete AckBigMapGridInfo::default_instance_;
  delete AckBigMapGridInfo_reflection_;
  delete ReqBigMapInfo::default_instance_;
  delete ReqBigMapInfo_reflection_;
  delete AckBigMapInfo::default_instance_;
  delete AckBigMapInfo_reflection_;
  delete ReqHoldMapGrid::default_instance_;
  delete ReqHoldMapGrid_reflection_;
  delete AckHoldMapGrid::default_instance_;
  delete AckHoldMapGrid_reflection_;
  delete ReqLeaveMapMsg::default_instance_;
  delete ReqLeaveMapMsg_reflection_;
  delete AckLeaveMapMsg::default_instance_;
  delete AckLeaveMapMsg_reflection_;
  delete ReqGetMapAward::default_instance_;
  delete ReqGetMapAward_reflection_;
  delete AckGetMapAward::default_instance_;
  delete AckGetMapAward_reflection_;
  delete ReqMapHunting::default_instance_;
  delete ReqMapHunting_reflection_;
  delete AckMapHunting::default_instance_;
  delete AckMapHunting_reflection_;
  delete ReqMapKingWar::default_instance_;
  delete ReqMapKingWar_reflection_;
  delete AckMapKingWar::default_instance_;
  delete AckMapKingWar_reflection_;
}

void protobuf_AddDesc_NFMsgExtra_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::NFMsg::protobuf_AddDesc_NFDefine_2eproto();
  ::NFMsg::protobuf_AddDesc_NFMsgBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020NFMsgExtra.proto\022\005NFMsg\032\016NFDefine.prot"
    "o\032\017NFMsgBase.proto\"z\n\010TeamInfo\022\035\n\007team_i"
    "d\030\001 \002(\0132\014.NFMsg.Ident\022 \n\ncaptain_id\030\002 \002("
    "\0132\014.NFMsg.Ident\022-\n\016teammemberInfo\030\003 \003(\0132"
    "\025.NFMsg.TeammemberInfo\"n\n\016TeammemberInfo"
    "\022\037\n\tplayer_id\030\001 \002(\0132\014.NFMsg.Ident\022\014\n\004nam"
    "e\030\002 \002(\t\022\016\n\006nLevel\030\003 \002(\005\022\013\n\003job\030\004 \002(\005\022\020\n\010"
    "HeadIcon\030\005 \002(\t\"U\n\020ReqAckCreateTeam\022\035\n\007te"
    "am_id\030\001 \002(\0132\014.NFMsg.Ident\022\"\n\txTeamInfo\030\002"
    " \001(\0132\017.NFMsg.TeamInfo\"S\n\016ReqAckJoinTeam\022"
    "\035\n\007team_id\030\001 \002(\0132\014.NFMsg.Ident\022\"\n\txTeamI"
    "nfo\030\002 \001(\0132\017.NFMsg.TeamInfo\"T\n\017ReqAckLeav"
    "eTeam\022\035\n\007team_id\030\001 \002(\0132\014.NFMsg.Ident\022\"\n\t"
    "xTeamInfo\030\002 \001(\0132\017.NFMsg.TeamInfo\"\350\002\n\023Req"
    "AckOprTeamMember\022\035\n\007team_id\030\001 \002(\0132\014.NFMs"
    "g.Ident\022\037\n\tmember_id\030\002 \002(\0132\014.NFMsg.Ident"
    "\022<\n\004type\030\003 \002(\0162..NFMsg.ReqAckOprTeamMemb"
    "er.EGTeamMemberOprType\022\"\n\txTeamInfo\030\004 \001("
    "\0132\017.NFMsg.TeamInfo\"\256\001\n\023EGTeamMemberOprTy"
    "pe\022\r\n\tEGAT_DOWN\020\000\022\013\n\007EGAT_UP\020\001\022\r\n\tEGAT_K"
    "ICK\020\002\022\020\n\014EGAT_APPOINT\020\003\022\r\n\tEGAT_FIRE\020\004\022\017"
    "\n\013EGAT_DEMISE\020\005\022\024\n\020EGAT_ACCEPTAPPLY\020\006\022\022\n"
    "\016EGAT_DENYAPPLY\020\007\022\020\n\014EGAT_KICKOUT\020\010\"x\n\020R"
    "eqAckInviteTeam\022\035\n\007team_id\030\001 \002(\0132\014.NFMsg"
    ".Ident\022\035\n\007self_id\030\002 \002(\0132\014.NFMsg.Ident\022&\n"
    "\020invite_target_id\030\003 \002(\0132\014.NFMsg.Ident\"\233\001"
    "\n\022ReqTeamEnterEctype\022\035\n\007team_id\030\001 \002(\0132\014."
    "NFMsg.Ident\022\035\n\007self_id\030\002 \002(\0132\014.NFMsg.Ide"
    "nt\022\021\n\tnEctypeID\030\003 \001(\005\022\020\n\010nGroupID\030\004 \001(\005\022"
    "\017\n\007nResult\030\005 \001(\005\022\021\n\tnServerID\030\006 \001(\005\"\210\001\n\022"
    "AckTeamEnterEctype\022\035\n\007team_id\030\001 \002(\0132\014.NF"
    "Msg.Ident\022\035\n\007self_id\030\002 \002(\0132\014.NFMsg.Ident"
    "\022\021\n\tnEctypeID\030\003 \001(\005\022\020\n\010nGroupID\030\004 \001(\005\022\017\n"
    "\007nResult\030\005 \001(\005\"k\n\021GridGuildBaseInfo\022\030\n\002i"
    "d\030\001 \002(\0132\014.NFMsg.Ident\022\r\n\005level\030\002 \002(\005\022\r\n\005"
    "count\030\003 \002(\005\022\020\n\010resource\030\004 \002(\005\022\014\n\004icon\030\005 "
    "\002(\014\")\n\021ReqBigMapGridInfo\022\024\n\014map_title_id"
    "\030\001 \003(\014\"\272\001\n\022BigMapGridBaseInfo\022\n\n\002id\030\001 \002("
    "\014\022,\n\nguild_info\030\002 \002(\0132\030.NFMsg.GridGuildB"
    "aseInfo\022\024\n\014kingwar_time\030\n \002(\005\022 \n\nkingwar"
    "rer\030\013 \002(\0132\014.NFMsg.Ident\022\024\n\014hurting_time\030"
    "\024 \002(\005\022\034\n\006hurter\030\025 \002(\0132\014.NFMsg.Ident\"z\n\016B"
    "igMapLeaveMsg\022\033\n\005owner\030\001 \002(\0132\014.NFMsg.Ide"
    "nt\022\022\n\nowner_name\030\002 \002(\014\022\020\n\010msg_data\030\003 \002(\014"
    "\022\020\n\010msg_time\030\004 \002(\005\022\023\n\013owner_level\030\005 \002(\005\""
    "\236\001\n\020BigMapWarHistory\022*\n\010red_info\030\001 \002(\0132\030"
    ".NFMsg.GridGuildBaseInfo\022+\n\tblue_info\030\002 "
    "\002(\0132\030.NFMsg.GridGuildBaseInfo\022\037\n\twinner_"
    "id\030\n \002(\0132\014.NFMsg.Ident\022\020\n\010war_time\030\013 \002(\005"
    "\"\323\001\n\024BigMapGridDetailInfo\0221\n\016grid_base_i"
    "nfo\030\001 \002(\0132\031.NFMsg.BigMapGridBaseInfo\0220\n\016"
    "stay_guid_list\030\002 \003(\0132\030.NFMsg.GridGuildBa"
    "seInfo\022(\n\tleave_msg\030\003 \003(\0132\025.NFMsg.BigMap"
    "LeaveMsg\022,\n\013war_history\030\004 \003(\0132\027.NFMsg.Bi"
    "gMapWarHistory\"B\n\021AckBigMapGridInfo\022-\n\010m"
    "ap_data\030\001 \003(\0132\033.NFMsg.BigMapGridDetailIn"
    "fo\"\017\n\rReqBigMapInfo\"B\n\rAckBigMapInfo\0221\n\016"
    "grid_base_info\030\001 \003(\0132\031.NFMsg.BigMapGridB"
    "aseInfo\"F\n\016ReqHoldMapGrid\022\024\n\014map_title_i"
    "d\030\001 \002(\014\022\036\n\010guild_id\030\002 \002(\0132\014.NFMsg.Ident\""
    "\020\n\016AckHoldMapGrid\"P\n\016ReqLeaveMapMsg\022\024\n\014m"
    "ap_title_id\030\001 \002(\014\022(\n\tleave_msg\030\002 \002(\0132\025.N"
    "FMsg.BigMapLeaveMsg\"\020\n\016AckLeaveMapMsg\"&\n"
    "\016ReqGetMapAward\022\024\n\014map_title_id\030\001 \002(\014\"\020\n"
    "\016AckGetMapAward\"%\n\rReqMapHunting\022\024\n\014map_"
    "title_id\030\001 \002(\014\"\017\n\rAckMapHunting\"\"\n\rReqMa"
    "pKingWar\022\021\n\tmap_title\030\001 \002(\014\"\"\n\rAckMapKin"
    "gWar\022\021\n\tmap_title\030\001 \002(\014", 2703);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFMsgExtra.proto", &protobuf_RegisterTypes);
  TeamInfo::default_instance_ = new TeamInfo();
  TeammemberInfo::default_instance_ = new TeammemberInfo();
  ReqAckCreateTeam::default_instance_ = new ReqAckCreateTeam();
  ReqAckJoinTeam::default_instance_ = new ReqAckJoinTeam();
  ReqAckLeaveTeam::default_instance_ = new ReqAckLeaveTeam();
  ReqAckOprTeamMember::default_instance_ = new ReqAckOprTeamMember();
  ReqAckInviteTeam::default_instance_ = new ReqAckInviteTeam();
  ReqTeamEnterEctype::default_instance_ = new ReqTeamEnterEctype();
  AckTeamEnterEctype::default_instance_ = new AckTeamEnterEctype();
  GridGuildBaseInfo::default_instance_ = new GridGuildBaseInfo();
  ReqBigMapGridInfo::default_instance_ = new ReqBigMapGridInfo();
  BigMapGridBaseInfo::default_instance_ = new BigMapGridBaseInfo();
  BigMapLeaveMsg::default_instance_ = new BigMapLeaveMsg();
  BigMapWarHistory::default_instance_ = new BigMapWarHistory();
  BigMapGridDetailInfo::default_instance_ = new BigMapGridDetailInfo();
  AckBigMapGridInfo::default_instance_ = new AckBigMapGridInfo();
  ReqBigMapInfo::default_instance_ = new ReqBigMapInfo();
  AckBigMapInfo::default_instance_ = new AckBigMapInfo();
  ReqHoldMapGrid::default_instance_ = new ReqHoldMapGrid();
  AckHoldMapGrid::default_instance_ = new AckHoldMapGrid();
  ReqLeaveMapMsg::default_instance_ = new ReqLeaveMapMsg();
  AckLeaveMapMsg::default_instance_ = new AckLeaveMapMsg();
  ReqGetMapAward::default_instance_ = new ReqGetMapAward();
  AckGetMapAward::default_instance_ = new AckGetMapAward();
  ReqMapHunting::default_instance_ = new ReqMapHunting();
  AckMapHunting::default_instance_ = new AckMapHunting();
  ReqMapKingWar::default_instance_ = new ReqMapKingWar();
  AckMapKingWar::default_instance_ = new AckMapKingWar();
  TeamInfo::default_instance_->InitAsDefaultInstance();
  TeammemberInfo::default_instance_->InitAsDefaultInstance();
  ReqAckCreateTeam::default_instance_->InitAsDefaultInstance();
  ReqAckJoinTeam::default_instance_->InitAsDefaultInstance();
  ReqAckLeaveTeam::default_instance_->InitAsDefaultInstance();
  ReqAckOprTeamMember::default_instance_->InitAsDefaultInstance();
  ReqAckInviteTeam::default_instance_->InitAsDefaultInstance();
  ReqTeamEnterEctype::default_instance_->InitAsDefaultInstance();
  AckTeamEnterEctype::default_instance_->InitAsDefaultInstance();
  GridGuildBaseInfo::default_instance_->InitAsDefaultInstance();
  ReqBigMapGridInfo::default_instance_->InitAsDefaultInstance();
  BigMapGridBaseInfo::default_instance_->InitAsDefaultInstance();
  BigMapLeaveMsg::default_instance_->InitAsDefaultInstance();
  BigMapWarHistory::default_instance_->InitAsDefaultInstance();
  BigMapGridDetailInfo::default_instance_->InitAsDefaultInstance();
  AckBigMapGridInfo::default_instance_->InitAsDefaultInstance();
  ReqBigMapInfo::default_instance_->InitAsDefaultInstance();
  AckBigMapInfo::default_instance_->InitAsDefaultInstance();
  ReqHoldMapGrid::default_instance_->InitAsDefaultInstance();
  AckHoldMapGrid::default_instance_->InitAsDefaultInstance();
  ReqLeaveMapMsg::default_instance_->InitAsDefaultInstance();
  AckLeaveMapMsg::default_instance_->InitAsDefaultInstance();
  ReqGetMapAward::default_instance_->InitAsDefaultInstance();
  AckGetMapAward::default_instance_->InitAsDefaultInstance();
  ReqMapHunting::default_instance_->InitAsDefaultInstance();
  AckMapHunting::default_instance_->InitAsDefaultInstance();
  ReqMapKingWar::default_instance_->InitAsDefaultInstance();
  AckMapKingWar::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NFMsgExtra_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NFMsgExtra_2eproto {
  StaticDescriptorInitializer_NFMsgExtra_2eproto() {
    protobuf_AddDesc_NFMsgExtra_2eproto();
  }
} static_descriptor_initializer_NFMsgExtra_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TeamInfo::kTeamIdFieldNumber;
const int TeamInfo::kCaptainIdFieldNumber;
const int TeamInfo::kTeammemberInfoFieldNumber;
#endif  // !_MSC_VER

TeamInfo::TeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamInfo::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  captain_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamInfo::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  captain_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfo::~TeamInfo() {
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete captain_id_;
  }
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfo_descriptor_;
}

const TeamInfo& TeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

TeamInfo* TeamInfo::default_instance_ = NULL;

TeamInfo* TeamInfo::New() const {
  return new TeamInfo;
}

void TeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_captain_id()) {
      if (captain_id_ != NULL) captain_id_->::NFMsg::Ident::Clear();
    }
  }
  teammemberinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_captain_id;
        break;
      }

      // required .NFMsg.Ident captain_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_captain_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_captain_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_teammemberInfo;
        break;
      }

      // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teammemberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teammemberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_teammemberInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // required .NFMsg.Ident captain_id = 2;
  if (has_captain_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->captain_id(), output);
  }

  // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
  for (int i = 0; i < this->teammemberinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->teammemberinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // required .NFMsg.Ident captain_id = 2;
  if (has_captain_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->captain_id(), target);
  }

  // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
  for (int i = 0; i < this->teammemberinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->teammemberinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // required .NFMsg.Ident captain_id = 2;
    if (has_captain_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->captain_id());
    }

  }
  // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
  total_size += 1 * this->teammemberinfo_size();
  for (int i = 0; i < this->teammemberinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teammemberinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  teammemberinfo_.MergeFrom(from.teammemberinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_captain_id()) {
      mutable_captain_id()->::NFMsg::Ident::MergeFrom(from.captain_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_captain_id()) {
    if (!this->captain_id().IsInitialized()) return false;
  }
  for (int i = 0; i < teammemberinfo_size(); i++) {
    if (!this->teammemberinfo(i).IsInitialized()) return false;
  }
  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(captain_id_, other->captain_id_);
    teammemberinfo_.Swap(&other->teammemberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfo_descriptor_;
  metadata.reflection = TeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeammemberInfo::kPlayerIdFieldNumber;
const int TeammemberInfo::kNameFieldNumber;
const int TeammemberInfo::kNLevelFieldNumber;
const int TeammemberInfo::kJobFieldNumber;
const int TeammemberInfo::kHeadIconFieldNumber;
#endif  // !_MSC_VER

TeammemberInfo::TeammemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeammemberInfo::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

TeammemberInfo::TeammemberInfo(const TeammemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeammemberInfo::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nlevel_ = 0;
  job_ = 0;
  headicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeammemberInfo::~TeammemberInfo() {
  SharedDtor();
}

void TeammemberInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (headicon_ != &::google::protobuf::internal::kEmptyString) {
    delete headicon_;
  }
  if (this != default_instance_) {
    delete player_id_;
  }
}

void TeammemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeammemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeammemberInfo_descriptor_;
}

const TeammemberInfo& TeammemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

TeammemberInfo* TeammemberInfo::default_instance_ = NULL;

TeammemberInfo* TeammemberInfo::New() const {
  return new TeammemberInfo;
}

void TeammemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    nlevel_ = 0;
    job_ = 0;
    if (has_headicon()) {
      if (headicon_ != &::google::protobuf::internal::kEmptyString) {
        headicon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeammemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nLevel;
        break;
      }

      // required int32 nLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlevel_)));
          set_has_nlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // required int32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_HeadIcon;
        break;
      }

      // required string HeadIcon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HeadIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headicon().data(), this->headicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeammemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 nLevel = 3;
  if (has_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nlevel(), output);
  }

  // required int32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->job(), output);
  }

  // required string HeadIcon = 5;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headicon().data(), this->headicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->headicon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeammemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 nLevel = 3;
  if (has_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nlevel(), target);
  }

  // required int32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->job(), target);
  }

  // required string HeadIcon = 5;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headicon().data(), this->headicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->headicon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeammemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 nLevel = 3;
    if (has_nlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlevel());
    }

    // required int32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // required string HeadIcon = 5;
    if (has_headicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headicon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeammemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeammemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeammemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeammemberInfo::MergeFrom(const TeammemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_nlevel()) {
      set_nlevel(from.nlevel());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_headicon()) {
      set_headicon(from.headicon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeammemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeammemberInfo::CopyFrom(const TeammemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeammemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  return true;
}

void TeammemberInfo::Swap(TeammemberInfo* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(name_, other->name_);
    std::swap(nlevel_, other->nlevel_);
    std::swap(job_, other->job_);
    std::swap(headicon_, other->headicon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeammemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeammemberInfo_descriptor_;
  metadata.reflection = TeammemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckCreateTeam::kTeamIdFieldNumber;
const int ReqAckCreateTeam::kXTeamInfoFieldNumber;
#endif  // !_MSC_VER

ReqAckCreateTeam::ReqAckCreateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckCreateTeam::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(&::NFMsg::TeamInfo::default_instance());
}

ReqAckCreateTeam::ReqAckCreateTeam(const ReqAckCreateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckCreateTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  xteaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckCreateTeam::~ReqAckCreateTeam() {
  SharedDtor();
}

void ReqAckCreateTeam::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete xteaminfo_;
  }
}

void ReqAckCreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckCreateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckCreateTeam_descriptor_;
}

const ReqAckCreateTeam& ReqAckCreateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

ReqAckCreateTeam* ReqAckCreateTeam::default_instance_ = NULL;

ReqAckCreateTeam* ReqAckCreateTeam::New() const {
  return new ReqAckCreateTeam;
}

void ReqAckCreateTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_xteaminfo()) {
      if (xteaminfo_ != NULL) xteaminfo_->::NFMsg::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckCreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xTeamInfo;
        break;
      }

      // optional .NFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xteaminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckCreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xteaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckCreateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->xteaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckCreateTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // optional .NFMsg.TeamInfo xTeamInfo = 2;
    if (has_xteaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xteaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckCreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckCreateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckCreateTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckCreateTeam::MergeFrom(const ReqAckCreateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_xteaminfo()) {
      mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckCreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCreateTeam::CopyFrom(const ReqAckCreateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCreateTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo().IsInitialized()) return false;
  }
  return true;
}

void ReqAckCreateTeam::Swap(ReqAckCreateTeam* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(xteaminfo_, other->xteaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckCreateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckCreateTeam_descriptor_;
  metadata.reflection = ReqAckCreateTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckJoinTeam::kTeamIdFieldNumber;
const int ReqAckJoinTeam::kXTeamInfoFieldNumber;
#endif  // !_MSC_VER

ReqAckJoinTeam::ReqAckJoinTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckJoinTeam::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(&::NFMsg::TeamInfo::default_instance());
}

ReqAckJoinTeam::ReqAckJoinTeam(const ReqAckJoinTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckJoinTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  xteaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckJoinTeam::~ReqAckJoinTeam() {
  SharedDtor();
}

void ReqAckJoinTeam::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete xteaminfo_;
  }
}

void ReqAckJoinTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckJoinTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckJoinTeam_descriptor_;
}

const ReqAckJoinTeam& ReqAckJoinTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

ReqAckJoinTeam* ReqAckJoinTeam::default_instance_ = NULL;

ReqAckJoinTeam* ReqAckJoinTeam::New() const {
  return new ReqAckJoinTeam;
}

void ReqAckJoinTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_xteaminfo()) {
      if (xteaminfo_ != NULL) xteaminfo_->::NFMsg::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckJoinTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xTeamInfo;
        break;
      }

      // optional .NFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xteaminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckJoinTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xteaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckJoinTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->xteaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckJoinTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // optional .NFMsg.TeamInfo xTeamInfo = 2;
    if (has_xteaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xteaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckJoinTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckJoinTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckJoinTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckJoinTeam::MergeFrom(const ReqAckJoinTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_xteaminfo()) {
      mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckJoinTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinTeam::CopyFrom(const ReqAckJoinTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo().IsInitialized()) return false;
  }
  return true;
}

void ReqAckJoinTeam::Swap(ReqAckJoinTeam* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(xteaminfo_, other->xteaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckJoinTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckJoinTeam_descriptor_;
  metadata.reflection = ReqAckJoinTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckLeaveTeam::kTeamIdFieldNumber;
const int ReqAckLeaveTeam::kXTeamInfoFieldNumber;
#endif  // !_MSC_VER

ReqAckLeaveTeam::ReqAckLeaveTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckLeaveTeam::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(&::NFMsg::TeamInfo::default_instance());
}

ReqAckLeaveTeam::ReqAckLeaveTeam(const ReqAckLeaveTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  xteaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckLeaveTeam::~ReqAckLeaveTeam() {
  SharedDtor();
}

void ReqAckLeaveTeam::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete xteaminfo_;
  }
}

void ReqAckLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckLeaveTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckLeaveTeam_descriptor_;
}

const ReqAckLeaveTeam& ReqAckLeaveTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

ReqAckLeaveTeam* ReqAckLeaveTeam::default_instance_ = NULL;

ReqAckLeaveTeam* ReqAckLeaveTeam::New() const {
  return new ReqAckLeaveTeam;
}

void ReqAckLeaveTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_xteaminfo()) {
      if (xteaminfo_ != NULL) xteaminfo_->::NFMsg::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xTeamInfo;
        break;
      }

      // optional .NFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xteaminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xteaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckLeaveTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->xteaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckLeaveTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // optional .NFMsg.TeamInfo xTeamInfo = 2;
    if (has_xteaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xteaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckLeaveTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckLeaveTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckLeaveTeam::MergeFrom(const ReqAckLeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_xteaminfo()) {
      mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckLeaveTeam::CopyFrom(const ReqAckLeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckLeaveTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo().IsInitialized()) return false;
  }
  return true;
}

void ReqAckLeaveTeam::Swap(ReqAckLeaveTeam* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(xteaminfo_, other->xteaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckLeaveTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckLeaveTeam_descriptor_;
  metadata.reflection = ReqAckLeaveTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckOprTeamMember_EGTeamMemberOprType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckOprTeamMember_EGTeamMemberOprType_descriptor_;
}
bool ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DOWN;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_UP;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_KICK;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_APPOINT;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_FIRE;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DEMISE;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_ACCEPTAPPLY;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DENYAPPLY;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_KICKOUT;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGTeamMemberOprType_MIN;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGTeamMemberOprType_MAX;
const int ReqAckOprTeamMember::EGTeamMemberOprType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqAckOprTeamMember::kTeamIdFieldNumber;
const int ReqAckOprTeamMember::kMemberIdFieldNumber;
const int ReqAckOprTeamMember::kTypeFieldNumber;
const int ReqAckOprTeamMember::kXTeamInfoFieldNumber;
#endif  // !_MSC_VER

ReqAckOprTeamMember::ReqAckOprTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckOprTeamMember::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  member_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(&::NFMsg::TeamInfo::default_instance());
}

ReqAckOprTeamMember::ReqAckOprTeamMember(const ReqAckOprTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckOprTeamMember::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  member_id_ = NULL;
  type_ = 0;
  xteaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckOprTeamMember::~ReqAckOprTeamMember() {
  SharedDtor();
}

void ReqAckOprTeamMember::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete member_id_;
    delete xteaminfo_;
  }
}

void ReqAckOprTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckOprTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckOprTeamMember_descriptor_;
}

const ReqAckOprTeamMember& ReqAckOprTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

ReqAckOprTeamMember* ReqAckOprTeamMember::default_instance_ = NULL;

ReqAckOprTeamMember* ReqAckOprTeamMember::New() const {
  return new ReqAckOprTeamMember;
}

void ReqAckOprTeamMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_member_id()) {
      if (member_id_ != NULL) member_id_->::NFMsg::Ident::Clear();
    }
    type_ = 0;
    if (has_xteaminfo()) {
      if (xteaminfo_ != NULL) xteaminfo_->::NFMsg::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckOprTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_id;
        break;
      }

      // required .NFMsg.Ident member_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(value)) {
            set_type(static_cast< ::NFMsg::ReqAckOprTeamMember_EGTeamMemberOprType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_xTeamInfo;
        break;
      }

      // optional .NFMsg.TeamInfo xTeamInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xteaminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckOprTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // required .NFMsg.Ident member_id = 2;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member_id(), output);
  }

  // required .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 4;
  if (has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->xteaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckOprTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // required .NFMsg.Ident member_id = 2;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member_id(), target);
  }

  // required .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 4;
  if (has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->xteaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckOprTeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // required .NFMsg.Ident member_id = 2;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id());
    }

    // required .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .NFMsg.TeamInfo xTeamInfo = 4;
    if (has_xteaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xteaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckOprTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckOprTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckOprTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckOprTeamMember::MergeFrom(const ReqAckOprTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_member_id()) {
      mutable_member_id()->::NFMsg::Ident::MergeFrom(from.member_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_xteaminfo()) {
      mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckOprTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckOprTeamMember::CopyFrom(const ReqAckOprTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckOprTeamMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_member_id()) {
    if (!this->member_id().IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo().IsInitialized()) return false;
  }
  return true;
}

void ReqAckOprTeamMember::Swap(ReqAckOprTeamMember* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(member_id_, other->member_id_);
    std::swap(type_, other->type_);
    std::swap(xteaminfo_, other->xteaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckOprTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckOprTeamMember_descriptor_;
  metadata.reflection = ReqAckOprTeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckInviteTeam::kTeamIdFieldNumber;
const int ReqAckInviteTeam::kSelfIdFieldNumber;
const int ReqAckInviteTeam::kInviteTargetIdFieldNumber;
#endif  // !_MSC_VER

ReqAckInviteTeam::ReqAckInviteTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckInviteTeam::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  self_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  invite_target_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckInviteTeam::ReqAckInviteTeam(const ReqAckInviteTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckInviteTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  self_id_ = NULL;
  invite_target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckInviteTeam::~ReqAckInviteTeam() {
  SharedDtor();
}

void ReqAckInviteTeam::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete self_id_;
    delete invite_target_id_;
  }
}

void ReqAckInviteTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckInviteTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckInviteTeam_descriptor_;
}

const ReqAckInviteTeam& ReqAckInviteTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

ReqAckInviteTeam* ReqAckInviteTeam::default_instance_ = NULL;

ReqAckInviteTeam* ReqAckInviteTeam::New() const {
  return new ReqAckInviteTeam;
}

void ReqAckInviteTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::NFMsg::Ident::Clear();
    }
    if (has_invite_target_id()) {
      if (invite_target_id_ != NULL) invite_target_id_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckInviteTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_self_id;
        break;
      }

      // required .NFMsg.Ident self_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_invite_target_id;
        break;
      }

      // required .NFMsg.Ident invite_target_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invite_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invite_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckInviteTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // required .NFMsg.Ident self_id = 2;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->self_id(), output);
  }

  // required .NFMsg.Ident invite_target_id = 3;
  if (has_invite_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->invite_target_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckInviteTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // required .NFMsg.Ident self_id = 2;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->self_id(), target);
  }

  // required .NFMsg.Ident invite_target_id = 3;
  if (has_invite_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->invite_target_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckInviteTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // required .NFMsg.Ident self_id = 2;
    if (has_self_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_id());
    }

    // required .NFMsg.Ident invite_target_id = 3;
    if (has_invite_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invite_target_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckInviteTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckInviteTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckInviteTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckInviteTeam::MergeFrom(const ReqAckInviteTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_self_id()) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_invite_target_id()) {
      mutable_invite_target_id()->::NFMsg::Ident::MergeFrom(from.invite_target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckInviteTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckInviteTeam::CopyFrom(const ReqAckInviteTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckInviteTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_self_id()) {
    if (!this->self_id().IsInitialized()) return false;
  }
  if (has_invite_target_id()) {
    if (!this->invite_target_id().IsInitialized()) return false;
  }
  return true;
}

void ReqAckInviteTeam::Swap(ReqAckInviteTeam* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(self_id_, other->self_id_);
    std::swap(invite_target_id_, other->invite_target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckInviteTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckInviteTeam_descriptor_;
  metadata.reflection = ReqAckInviteTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqTeamEnterEctype::kTeamIdFieldNumber;
const int ReqTeamEnterEctype::kSelfIdFieldNumber;
const int ReqTeamEnterEctype::kNEctypeIDFieldNumber;
const int ReqTeamEnterEctype::kNGroupIDFieldNumber;
const int ReqTeamEnterEctype::kNResultFieldNumber;
const int ReqTeamEnterEctype::kNServerIDFieldNumber;
#endif  // !_MSC_VER

ReqTeamEnterEctype::ReqTeamEnterEctype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqTeamEnterEctype::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  self_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqTeamEnterEctype::ReqTeamEnterEctype(const ReqTeamEnterEctype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqTeamEnterEctype::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  self_id_ = NULL;
  nectypeid_ = 0;
  ngroupid_ = 0;
  nresult_ = 0;
  nserverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTeamEnterEctype::~ReqTeamEnterEctype() {
  SharedDtor();
}

void ReqTeamEnterEctype::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete self_id_;
  }
}

void ReqTeamEnterEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTeamEnterEctype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTeamEnterEctype_descriptor_;
}

const ReqTeamEnterEctype& ReqTeamEnterEctype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

ReqTeamEnterEctype* ReqTeamEnterEctype::default_instance_ = NULL;

ReqTeamEnterEctype* ReqTeamEnterEctype::New() const {
  return new ReqTeamEnterEctype;
}

void ReqTeamEnterEctype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::NFMsg::Ident::Clear();
    }
    nectypeid_ = 0;
    ngroupid_ = 0;
    nresult_ = 0;
    nserverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTeamEnterEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_self_id;
        break;
      }

      // required .NFMsg.Ident self_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nEctypeID;
        break;
      }

      // optional int32 nEctypeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nEctypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nectypeid_)));
          set_has_nectypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nGroupID;
        break;
      }

      // optional int32 nGroupID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
          set_has_ngroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nResult;
        break;
      }

      // optional int32 nResult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
          set_has_nresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nServerID;
        break;
      }

      // optional int32 nServerID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserverid_)));
          set_has_nserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqTeamEnterEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // required .NFMsg.Ident self_id = 2;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->self_id(), output);
  }

  // optional int32 nEctypeID = 3;
  if (has_nectypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nectypeid(), output);
  }

  // optional int32 nGroupID = 4;
  if (has_ngroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ngroupid(), output);
  }

  // optional int32 nResult = 5;
  if (has_nresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nresult(), output);
  }

  // optional int32 nServerID = 6;
  if (has_nserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqTeamEnterEctype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // required .NFMsg.Ident self_id = 2;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->self_id(), target);
  }

  // optional int32 nEctypeID = 3;
  if (has_nectypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nectypeid(), target);
  }

  // optional int32 nGroupID = 4;
  if (has_ngroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ngroupid(), target);
  }

  // optional int32 nResult = 5;
  if (has_nresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nresult(), target);
  }

  // optional int32 nServerID = 6;
  if (has_nserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqTeamEnterEctype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // required .NFMsg.Ident self_id = 2;
    if (has_self_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_id());
    }

    // optional int32 nEctypeID = 3;
    if (has_nectypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nectypeid());
    }

    // optional int32 nGroupID = 4;
    if (has_ngroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

    // optional int32 nResult = 5;
    if (has_nresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nresult());
    }

    // optional int32 nServerID = 6;
    if (has_nserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTeamEnterEctype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTeamEnterEctype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTeamEnterEctype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTeamEnterEctype::MergeFrom(const ReqTeamEnterEctype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_self_id()) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_nectypeid()) {
      set_nectypeid(from.nectypeid());
    }
    if (from.has_ngroupid()) {
      set_ngroupid(from.ngroupid());
    }
    if (from.has_nresult()) {
      set_nresult(from.nresult());
    }
    if (from.has_nserverid()) {
      set_nserverid(from.nserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTeamEnterEctype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTeamEnterEctype::CopyFrom(const ReqTeamEnterEctype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTeamEnterEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_self_id()) {
    if (!this->self_id().IsInitialized()) return false;
  }
  return true;
}

void ReqTeamEnterEctype::Swap(ReqTeamEnterEctype* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(self_id_, other->self_id_);
    std::swap(nectypeid_, other->nectypeid_);
    std::swap(ngroupid_, other->ngroupid_);
    std::swap(nresult_, other->nresult_);
    std::swap(nserverid_, other->nserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTeamEnterEctype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTeamEnterEctype_descriptor_;
  metadata.reflection = ReqTeamEnterEctype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckTeamEnterEctype::kTeamIdFieldNumber;
const int AckTeamEnterEctype::kSelfIdFieldNumber;
const int AckTeamEnterEctype::kNEctypeIDFieldNumber;
const int AckTeamEnterEctype::kNGroupIDFieldNumber;
const int AckTeamEnterEctype::kNResultFieldNumber;
#endif  // !_MSC_VER

AckTeamEnterEctype::AckTeamEnterEctype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckTeamEnterEctype::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  self_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

AckTeamEnterEctype::AckTeamEnterEctype(const AckTeamEnterEctype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckTeamEnterEctype::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  self_id_ = NULL;
  nectypeid_ = 0;
  ngroupid_ = 0;
  nresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckTeamEnterEctype::~AckTeamEnterEctype() {
  SharedDtor();
}

void AckTeamEnterEctype::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete self_id_;
  }
}

void AckTeamEnterEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckTeamEnterEctype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckTeamEnterEctype_descriptor_;
}

const AckTeamEnterEctype& AckTeamEnterEctype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

AckTeamEnterEctype* AckTeamEnterEctype::default_instance_ = NULL;

AckTeamEnterEctype* AckTeamEnterEctype::New() const {
  return new AckTeamEnterEctype;
}

void AckTeamEnterEctype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::NFMsg::Ident::Clear();
    }
    nectypeid_ = 0;
    ngroupid_ = 0;
    nresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckTeamEnterEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_self_id;
        break;
      }

      // required .NFMsg.Ident self_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nEctypeID;
        break;
      }

      // optional int32 nEctypeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nEctypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nectypeid_)));
          set_has_nectypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nGroupID;
        break;
      }

      // optional int32 nGroupID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
          set_has_ngroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nResult;
        break;
      }

      // optional int32 nResult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
          set_has_nresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckTeamEnterEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // required .NFMsg.Ident self_id = 2;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->self_id(), output);
  }

  // optional int32 nEctypeID = 3;
  if (has_nectypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nectypeid(), output);
  }

  // optional int32 nGroupID = 4;
  if (has_ngroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ngroupid(), output);
  }

  // optional int32 nResult = 5;
  if (has_nresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckTeamEnterEctype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // required .NFMsg.Ident self_id = 2;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->self_id(), target);
  }

  // optional int32 nEctypeID = 3;
  if (has_nectypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nectypeid(), target);
  }

  // optional int32 nGroupID = 4;
  if (has_ngroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ngroupid(), target);
  }

  // optional int32 nResult = 5;
  if (has_nresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckTeamEnterEctype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // required .NFMsg.Ident self_id = 2;
    if (has_self_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_id());
    }

    // optional int32 nEctypeID = 3;
    if (has_nectypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nectypeid());
    }

    // optional int32 nGroupID = 4;
    if (has_ngroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

    // optional int32 nResult = 5;
    if (has_nresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckTeamEnterEctype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckTeamEnterEctype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckTeamEnterEctype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckTeamEnterEctype::MergeFrom(const AckTeamEnterEctype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_self_id()) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_nectypeid()) {
      set_nectypeid(from.nectypeid());
    }
    if (from.has_ngroupid()) {
      set_ngroupid(from.ngroupid());
    }
    if (from.has_nresult()) {
      set_nresult(from.nresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckTeamEnterEctype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTeamEnterEctype::CopyFrom(const AckTeamEnterEctype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTeamEnterEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_self_id()) {
    if (!this->self_id().IsInitialized()) return false;
  }
  return true;
}

void AckTeamEnterEctype::Swap(AckTeamEnterEctype* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(self_id_, other->self_id_);
    std::swap(nectypeid_, other->nectypeid_);
    std::swap(ngroupid_, other->ngroupid_);
    std::swap(nresult_, other->nresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckTeamEnterEctype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckTeamEnterEctype_descriptor_;
  metadata.reflection = AckTeamEnterEctype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GridGuildBaseInfo::kIdFieldNumber;
const int GridGuildBaseInfo::kLevelFieldNumber;
const int GridGuildBaseInfo::kCountFieldNumber;
const int GridGuildBaseInfo::kResourceFieldNumber;
const int GridGuildBaseInfo::kIconFieldNumber;
#endif  // !_MSC_VER

GridGuildBaseInfo::GridGuildBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GridGuildBaseInfo::InitAsDefaultInstance() {
  id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

GridGuildBaseInfo::GridGuildBaseInfo(const GridGuildBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GridGuildBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  level_ = 0;
  count_ = 0;
  resource_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridGuildBaseInfo::~GridGuildBaseInfo() {
  SharedDtor();
}

void GridGuildBaseInfo::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void GridGuildBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridGuildBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridGuildBaseInfo_descriptor_;
}

const GridGuildBaseInfo& GridGuildBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

GridGuildBaseInfo* GridGuildBaseInfo::default_instance_ = NULL;

GridGuildBaseInfo* GridGuildBaseInfo::New() const {
  return new GridGuildBaseInfo;
}

void GridGuildBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::NFMsg::Ident::Clear();
    }
    level_ = 0;
    count_ = 0;
    resource_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridGuildBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resource;
        break;
      }

      // required int32 resource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_)));
          set_has_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_icon;
        break;
      }

      // required bytes icon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GridGuildBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // required int32 resource = 4;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->resource(), output);
  }

  // required bytes icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->icon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GridGuildBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // required int32 resource = 4;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->resource(), target);
  }

  // required bytes icon = 5;
  if (has_icon()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->icon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GridGuildBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 resource = 4;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource());
    }

    // required bytes icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->icon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridGuildBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridGuildBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridGuildBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridGuildBaseInfo::MergeFrom(const GridGuildBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::NFMsg::Ident::MergeFrom(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridGuildBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridGuildBaseInfo::CopyFrom(const GridGuildBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridGuildBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  return true;
}

void GridGuildBaseInfo::Swap(GridGuildBaseInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(count_, other->count_);
    std::swap(resource_, other->resource_);
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridGuildBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridGuildBaseInfo_descriptor_;
  metadata.reflection = GridGuildBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBigMapGridInfo::kMapTitleIdFieldNumber;
#endif  // !_MSC_VER

ReqBigMapGridInfo::ReqBigMapGridInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBigMapGridInfo::InitAsDefaultInstance() {
}

ReqBigMapGridInfo::ReqBigMapGridInfo(const ReqBigMapGridInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBigMapGridInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBigMapGridInfo::~ReqBigMapGridInfo() {
  SharedDtor();
}

void ReqBigMapGridInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBigMapGridInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBigMapGridInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBigMapGridInfo_descriptor_;
}

const ReqBigMapGridInfo& ReqBigMapGridInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

ReqBigMapGridInfo* ReqBigMapGridInfo::default_instance_ = NULL;

ReqBigMapGridInfo* ReqBigMapGridInfo::New() const {
  return new ReqBigMapGridInfo;
}

void ReqBigMapGridInfo::Clear() {
  map_title_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBigMapGridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes map_title_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_title_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_map_title_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_title_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBigMapGridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes map_title_id = 1;
  for (int i = 0; i < this->map_title_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->map_title_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBigMapGridInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes map_title_id = 1;
  for (int i = 0; i < this->map_title_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->map_title_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBigMapGridInfo::ByteSize() const {
  int total_size = 0;

  // repeated bytes map_title_id = 1;
  total_size += 1 * this->map_title_id_size();
  for (int i = 0; i < this->map_title_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->map_title_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBigMapGridInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBigMapGridInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBigMapGridInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBigMapGridInfo::MergeFrom(const ReqBigMapGridInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_title_id_.MergeFrom(from.map_title_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBigMapGridInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBigMapGridInfo::CopyFrom(const ReqBigMapGridInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBigMapGridInfo::IsInitialized() const {

  return true;
}

void ReqBigMapGridInfo::Swap(ReqBigMapGridInfo* other) {
  if (other != this) {
    map_title_id_.Swap(&other->map_title_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBigMapGridInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBigMapGridInfo_descriptor_;
  metadata.reflection = ReqBigMapGridInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BigMapGridBaseInfo::kIdFieldNumber;
const int BigMapGridBaseInfo::kGuildInfoFieldNumber;
const int BigMapGridBaseInfo::kKingwarTimeFieldNumber;
const int BigMapGridBaseInfo::kKingwarrerFieldNumber;
const int BigMapGridBaseInfo::kHurtingTimeFieldNumber;
const int BigMapGridBaseInfo::kHurterFieldNumber;
#endif  // !_MSC_VER

BigMapGridBaseInfo::BigMapGridBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BigMapGridBaseInfo::InitAsDefaultInstance() {
  guild_info_ = const_cast< ::NFMsg::GridGuildBaseInfo*>(&::NFMsg::GridGuildBaseInfo::default_instance());
  kingwarrer_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  hurter_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

BigMapGridBaseInfo::BigMapGridBaseInfo(const BigMapGridBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BigMapGridBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_info_ = NULL;
  kingwar_time_ = 0;
  kingwarrer_ = NULL;
  hurting_time_ = 0;
  hurter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigMapGridBaseInfo::~BigMapGridBaseInfo() {
  SharedDtor();
}

void BigMapGridBaseInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete guild_info_;
    delete kingwarrer_;
    delete hurter_;
  }
}

void BigMapGridBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapGridBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigMapGridBaseInfo_descriptor_;
}

const BigMapGridBaseInfo& BigMapGridBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

BigMapGridBaseInfo* BigMapGridBaseInfo::default_instance_ = NULL;

BigMapGridBaseInfo* BigMapGridBaseInfo::New() const {
  return new BigMapGridBaseInfo;
}

void BigMapGridBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_guild_info()) {
      if (guild_info_ != NULL) guild_info_->::NFMsg::GridGuildBaseInfo::Clear();
    }
    kingwar_time_ = 0;
    if (has_kingwarrer()) {
      if (kingwarrer_ != NULL) kingwarrer_->::NFMsg::Ident::Clear();
    }
    hurting_time_ = 0;
    if (has_hurter()) {
      if (hurter_ != NULL) hurter_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BigMapGridBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_info;
        break;
      }

      // required .NFMsg.GridGuildBaseInfo guild_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_kingwar_time;
        break;
      }

      // required int32 kingwar_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kingwar_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kingwar_time_)));
          set_has_kingwar_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_kingwarrer;
        break;
      }

      // required .NFMsg.Ident kingwarrer = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kingwarrer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kingwarrer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_hurting_time;
        break;
      }

      // required int32 hurting_time = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurting_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurting_time_)));
          set_has_hurting_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_hurter;
        break;
      }

      // required .NFMsg.Ident hurter = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hurter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hurter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BigMapGridBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }

  // required .NFMsg.GridGuildBaseInfo guild_info = 2;
  if (has_guild_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guild_info(), output);
  }

  // required int32 kingwar_time = 10;
  if (has_kingwar_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->kingwar_time(), output);
  }

  // required .NFMsg.Ident kingwarrer = 11;
  if (has_kingwarrer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->kingwarrer(), output);
  }

  // required int32 hurting_time = 20;
  if (has_hurting_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->hurting_time(), output);
  }

  // required .NFMsg.Ident hurter = 21;
  if (has_hurter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->hurter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BigMapGridBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // required .NFMsg.GridGuildBaseInfo guild_info = 2;
  if (has_guild_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guild_info(), target);
  }

  // required int32 kingwar_time = 10;
  if (has_kingwar_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->kingwar_time(), target);
  }

  // required .NFMsg.Ident kingwarrer = 11;
  if (has_kingwarrer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->kingwarrer(), target);
  }

  // required int32 hurting_time = 20;
  if (has_hurting_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->hurting_time(), target);
  }

  // required .NFMsg.Ident hurter = 21;
  if (has_hurter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->hurter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BigMapGridBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // required .NFMsg.GridGuildBaseInfo guild_info = 2;
    if (has_guild_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_info());
    }

    // required int32 kingwar_time = 10;
    if (has_kingwar_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kingwar_time());
    }

    // required .NFMsg.Ident kingwarrer = 11;
    if (has_kingwarrer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kingwarrer());
    }

    // required int32 hurting_time = 20;
    if (has_hurting_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hurting_time());
    }

    // required .NFMsg.Ident hurter = 21;
    if (has_hurter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hurter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapGridBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BigMapGridBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BigMapGridBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BigMapGridBaseInfo::MergeFrom(const BigMapGridBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_guild_info()) {
      mutable_guild_info()->::NFMsg::GridGuildBaseInfo::MergeFrom(from.guild_info());
    }
    if (from.has_kingwar_time()) {
      set_kingwar_time(from.kingwar_time());
    }
    if (from.has_kingwarrer()) {
      mutable_kingwarrer()->::NFMsg::Ident::MergeFrom(from.kingwarrer());
    }
    if (from.has_hurting_time()) {
      set_hurting_time(from.hurting_time());
    }
    if (from.has_hurter()) {
      mutable_hurter()->::NFMsg::Ident::MergeFrom(from.hurter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BigMapGridBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapGridBaseInfo::CopyFrom(const BigMapGridBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapGridBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_guild_info()) {
    if (!this->guild_info().IsInitialized()) return false;
  }
  if (has_kingwarrer()) {
    if (!this->kingwarrer().IsInitialized()) return false;
  }
  if (has_hurter()) {
    if (!this->hurter().IsInitialized()) return false;
  }
  return true;
}

void BigMapGridBaseInfo::Swap(BigMapGridBaseInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(guild_info_, other->guild_info_);
    std::swap(kingwar_time_, other->kingwar_time_);
    std::swap(kingwarrer_, other->kingwarrer_);
    std::swap(hurting_time_, other->hurting_time_);
    std::swap(hurter_, other->hurter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BigMapGridBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigMapGridBaseInfo_descriptor_;
  metadata.reflection = BigMapGridBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BigMapLeaveMsg::kOwnerFieldNumber;
const int BigMapLeaveMsg::kOwnerNameFieldNumber;
const int BigMapLeaveMsg::kMsgDataFieldNumber;
const int BigMapLeaveMsg::kMsgTimeFieldNumber;
const int BigMapLeaveMsg::kOwnerLevelFieldNumber;
#endif  // !_MSC_VER

BigMapLeaveMsg::BigMapLeaveMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BigMapLeaveMsg::InitAsDefaultInstance() {
  owner_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

BigMapLeaveMsg::BigMapLeaveMsg(const BigMapLeaveMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BigMapLeaveMsg::SharedCtor() {
  _cached_size_ = 0;
  owner_ = NULL;
  owner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_time_ = 0;
  owner_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigMapLeaveMsg::~BigMapLeaveMsg() {
  SharedDtor();
}

void BigMapLeaveMsg::SharedDtor() {
  if (owner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_name_;
  }
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_data_;
  }
  if (this != default_instance_) {
    delete owner_;
  }
}

void BigMapLeaveMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapLeaveMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigMapLeaveMsg_descriptor_;
}

const BigMapLeaveMsg& BigMapLeaveMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

BigMapLeaveMsg* BigMapLeaveMsg::default_instance_ = NULL;

BigMapLeaveMsg* BigMapLeaveMsg::New() const {
  return new BigMapLeaveMsg;
}

void BigMapLeaveMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_owner()) {
      if (owner_ != NULL) owner_->::NFMsg::Ident::Clear();
    }
    if (has_owner_name()) {
      if (owner_name_ != &::google::protobuf::internal::kEmptyString) {
        owner_name_->clear();
      }
    }
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
        msg_data_->clear();
      }
    }
    msg_time_ = 0;
    owner_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BigMapLeaveMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident owner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_owner_name;
        break;
      }

      // required bytes owner_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_owner_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_data;
        break;
      }

      // required bytes msg_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_msg_time;
        break;
      }

      // required int32 msg_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_time_)));
          set_has_msg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_owner_level;
        break;
      }

      // required int32 owner_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_level_)));
          set_has_owner_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BigMapLeaveMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident owner = 1;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->owner(), output);
  }

  // required bytes owner_name = 2;
  if (has_owner_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->owner_name(), output);
  }

  // required bytes msg_data = 3;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msg_data(), output);
  }

  // required int32 msg_time = 4;
  if (has_msg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_time(), output);
  }

  // required int32 owner_level = 5;
  if (has_owner_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->owner_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BigMapLeaveMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident owner = 1;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->owner(), target);
  }

  // required bytes owner_name = 2;
  if (has_owner_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->owner_name(), target);
  }

  // required bytes msg_data = 3;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg_data(), target);
  }

  // required int32 msg_time = 4;
  if (has_msg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->msg_time(), target);
  }

  // required int32 owner_level = 5;
  if (has_owner_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->owner_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BigMapLeaveMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident owner = 1;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner());
    }

    // required bytes owner_name = 2;
    if (has_owner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->owner_name());
    }

    // required bytes msg_data = 3;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

    // required int32 msg_time = 4;
    if (has_msg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_time());
    }

    // required int32 owner_level = 5;
    if (has_owner_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->owner_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapLeaveMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BigMapLeaveMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BigMapLeaveMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BigMapLeaveMsg::MergeFrom(const BigMapLeaveMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner()) {
      mutable_owner()->::NFMsg::Ident::MergeFrom(from.owner());
    }
    if (from.has_owner_name()) {
      set_owner_name(from.owner_name());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
    if (from.has_msg_time()) {
      set_msg_time(from.msg_time());
    }
    if (from.has_owner_level()) {
      set_owner_level(from.owner_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BigMapLeaveMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapLeaveMsg::CopyFrom(const BigMapLeaveMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapLeaveMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_owner()) {
    if (!this->owner().IsInitialized()) return false;
  }
  return true;
}

void BigMapLeaveMsg::Swap(BigMapLeaveMsg* other) {
  if (other != this) {
    std::swap(owner_, other->owner_);
    std::swap(owner_name_, other->owner_name_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(msg_time_, other->msg_time_);
    std::swap(owner_level_, other->owner_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BigMapLeaveMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigMapLeaveMsg_descriptor_;
  metadata.reflection = BigMapLeaveMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BigMapWarHistory::kRedInfoFieldNumber;
const int BigMapWarHistory::kBlueInfoFieldNumber;
const int BigMapWarHistory::kWinnerIdFieldNumber;
const int BigMapWarHistory::kWarTimeFieldNumber;
#endif  // !_MSC_VER

BigMapWarHistory::BigMapWarHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BigMapWarHistory::InitAsDefaultInstance() {
  red_info_ = const_cast< ::NFMsg::GridGuildBaseInfo*>(&::NFMsg::GridGuildBaseInfo::default_instance());
  blue_info_ = const_cast< ::NFMsg::GridGuildBaseInfo*>(&::NFMsg::GridGuildBaseInfo::default_instance());
  winner_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

BigMapWarHistory::BigMapWarHistory(const BigMapWarHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BigMapWarHistory::SharedCtor() {
  _cached_size_ = 0;
  red_info_ = NULL;
  blue_info_ = NULL;
  winner_id_ = NULL;
  war_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigMapWarHistory::~BigMapWarHistory() {
  SharedDtor();
}

void BigMapWarHistory::SharedDtor() {
  if (this != default_instance_) {
    delete red_info_;
    delete blue_info_;
    delete winner_id_;
  }
}

void BigMapWarHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapWarHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigMapWarHistory_descriptor_;
}

const BigMapWarHistory& BigMapWarHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

BigMapWarHistory* BigMapWarHistory::default_instance_ = NULL;

BigMapWarHistory* BigMapWarHistory::New() const {
  return new BigMapWarHistory;
}

void BigMapWarHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_red_info()) {
      if (red_info_ != NULL) red_info_->::NFMsg::GridGuildBaseInfo::Clear();
    }
    if (has_blue_info()) {
      if (blue_info_ != NULL) blue_info_->::NFMsg::GridGuildBaseInfo::Clear();
    }
    if (has_winner_id()) {
      if (winner_id_ != NULL) winner_id_->::NFMsg::Ident::Clear();
    }
    war_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BigMapWarHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.GridGuildBaseInfo red_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_red_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blue_info;
        break;
      }

      // required .NFMsg.GridGuildBaseInfo blue_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blue_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_winner_id;
        break;
      }

      // required .NFMsg.Ident winner_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winner_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_winner_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_war_time;
        break;
      }

      // required int32 war_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_war_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &war_time_)));
          set_has_war_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BigMapWarHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.GridGuildBaseInfo red_info = 1;
  if (has_red_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->red_info(), output);
  }

  // required .NFMsg.GridGuildBaseInfo blue_info = 2;
  if (has_blue_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blue_info(), output);
  }

  // required .NFMsg.Ident winner_id = 10;
  if (has_winner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->winner_id(), output);
  }

  // required int32 war_time = 11;
  if (has_war_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->war_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BigMapWarHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.GridGuildBaseInfo red_info = 1;
  if (has_red_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->red_info(), target);
  }

  // required .NFMsg.GridGuildBaseInfo blue_info = 2;
  if (has_blue_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blue_info(), target);
  }

  // required .NFMsg.Ident winner_id = 10;
  if (has_winner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->winner_id(), target);
  }

  // required int32 war_time = 11;
  if (has_war_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->war_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BigMapWarHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.GridGuildBaseInfo red_info = 1;
    if (has_red_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->red_info());
    }

    // required .NFMsg.GridGuildBaseInfo blue_info = 2;
    if (has_blue_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blue_info());
    }

    // required .NFMsg.Ident winner_id = 10;
    if (has_winner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->winner_id());
    }

    // required int32 war_time = 11;
    if (has_war_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->war_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapWarHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BigMapWarHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BigMapWarHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BigMapWarHistory::MergeFrom(const BigMapWarHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_red_info()) {
      mutable_red_info()->::NFMsg::GridGuildBaseInfo::MergeFrom(from.red_info());
    }
    if (from.has_blue_info()) {
      mutable_blue_info()->::NFMsg::GridGuildBaseInfo::MergeFrom(from.blue_info());
    }
    if (from.has_winner_id()) {
      mutable_winner_id()->::NFMsg::Ident::MergeFrom(from.winner_id());
    }
    if (from.has_war_time()) {
      set_war_time(from.war_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BigMapWarHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapWarHistory::CopyFrom(const BigMapWarHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapWarHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_red_info()) {
    if (!this->red_info().IsInitialized()) return false;
  }
  if (has_blue_info()) {
    if (!this->blue_info().IsInitialized()) return false;
  }
  if (has_winner_id()) {
    if (!this->winner_id().IsInitialized()) return false;
  }
  return true;
}

void BigMapWarHistory::Swap(BigMapWarHistory* other) {
  if (other != this) {
    std::swap(red_info_, other->red_info_);
    std::swap(blue_info_, other->blue_info_);
    std::swap(winner_id_, other->winner_id_);
    std::swap(war_time_, other->war_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BigMapWarHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigMapWarHistory_descriptor_;
  metadata.reflection = BigMapWarHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BigMapGridDetailInfo::kGridBaseInfoFieldNumber;
const int BigMapGridDetailInfo::kStayGuidListFieldNumber;
const int BigMapGridDetailInfo::kLeaveMsgFieldNumber;
const int BigMapGridDetailInfo::kWarHistoryFieldNumber;
#endif  // !_MSC_VER

BigMapGridDetailInfo::BigMapGridDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BigMapGridDetailInfo::InitAsDefaultInstance() {
  grid_base_info_ = const_cast< ::NFMsg::BigMapGridBaseInfo*>(&::NFMsg::BigMapGridBaseInfo::default_instance());
}

BigMapGridDetailInfo::BigMapGridDetailInfo(const BigMapGridDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BigMapGridDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  grid_base_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigMapGridDetailInfo::~BigMapGridDetailInfo() {
  SharedDtor();
}

void BigMapGridDetailInfo::SharedDtor() {
  if (this != default_instance_) {
    delete grid_base_info_;
  }
}

void BigMapGridDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapGridDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigMapGridDetailInfo_descriptor_;
}

const BigMapGridDetailInfo& BigMapGridDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

BigMapGridDetailInfo* BigMapGridDetailInfo::default_instance_ = NULL;

BigMapGridDetailInfo* BigMapGridDetailInfo::New() const {
  return new BigMapGridDetailInfo;
}

void BigMapGridDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_grid_base_info()) {
      if (grid_base_info_ != NULL) grid_base_info_->::NFMsg::BigMapGridBaseInfo::Clear();
    }
  }
  stay_guid_list_.Clear();
  leave_msg_.Clear();
  war_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BigMapGridDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grid_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stay_guid_list;
        break;
      }

      // repeated .NFMsg.GridGuildBaseInfo stay_guid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stay_guid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stay_guid_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stay_guid_list;
        if (input->ExpectTag(26)) goto parse_leave_msg;
        break;
      }

      // repeated .NFMsg.BigMapLeaveMsg leave_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leave_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leave_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leave_msg;
        if (input->ExpectTag(34)) goto parse_war_history;
        break;
      }

      // repeated .NFMsg.BigMapWarHistory war_history = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_war_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_war_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_war_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BigMapGridDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  if (has_grid_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grid_base_info(), output);
  }

  // repeated .NFMsg.GridGuildBaseInfo stay_guid_list = 2;
  for (int i = 0; i < this->stay_guid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stay_guid_list(i), output);
  }

  // repeated .NFMsg.BigMapLeaveMsg leave_msg = 3;
  for (int i = 0; i < this->leave_msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leave_msg(i), output);
  }

  // repeated .NFMsg.BigMapWarHistory war_history = 4;
  for (int i = 0; i < this->war_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->war_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BigMapGridDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  if (has_grid_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grid_base_info(), target);
  }

  // repeated .NFMsg.GridGuildBaseInfo stay_guid_list = 2;
  for (int i = 0; i < this->stay_guid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stay_guid_list(i), target);
  }

  // repeated .NFMsg.BigMapLeaveMsg leave_msg = 3;
  for (int i = 0; i < this->leave_msg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leave_msg(i), target);
  }

  // repeated .NFMsg.BigMapWarHistory war_history = 4;
  for (int i = 0; i < this->war_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->war_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BigMapGridDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
    if (has_grid_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grid_base_info());
    }

  }
  // repeated .NFMsg.GridGuildBaseInfo stay_guid_list = 2;
  total_size += 1 * this->stay_guid_list_size();
  for (int i = 0; i < this->stay_guid_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stay_guid_list(i));
  }

  // repeated .NFMsg.BigMapLeaveMsg leave_msg = 3;
  total_size += 1 * this->leave_msg_size();
  for (int i = 0; i < this->leave_msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leave_msg(i));
  }

  // repeated .NFMsg.BigMapWarHistory war_history = 4;
  total_size += 1 * this->war_history_size();
  for (int i = 0; i < this->war_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->war_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapGridDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BigMapGridDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BigMapGridDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BigMapGridDetailInfo::MergeFrom(const BigMapGridDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stay_guid_list_.MergeFrom(from.stay_guid_list_);
  leave_msg_.MergeFrom(from.leave_msg_);
  war_history_.MergeFrom(from.war_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_base_info()) {
      mutable_grid_base_info()->::NFMsg::BigMapGridBaseInfo::MergeFrom(from.grid_base_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BigMapGridDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapGridDetailInfo::CopyFrom(const BigMapGridDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapGridDetailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_grid_base_info()) {
    if (!this->grid_base_info().IsInitialized()) return false;
  }
  for (int i = 0; i < stay_guid_list_size(); i++) {
    if (!this->stay_guid_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < leave_msg_size(); i++) {
    if (!this->leave_msg(i).IsInitialized()) return false;
  }
  for (int i = 0; i < war_history_size(); i++) {
    if (!this->war_history(i).IsInitialized()) return false;
  }
  return true;
}

void BigMapGridDetailInfo::Swap(BigMapGridDetailInfo* other) {
  if (other != this) {
    std::swap(grid_base_info_, other->grid_base_info_);
    stay_guid_list_.Swap(&other->stay_guid_list_);
    leave_msg_.Swap(&other->leave_msg_);
    war_history_.Swap(&other->war_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BigMapGridDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigMapGridDetailInfo_descriptor_;
  metadata.reflection = BigMapGridDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBigMapGridInfo::kMapDataFieldNumber;
#endif  // !_MSC_VER

AckBigMapGridInfo::AckBigMapGridInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBigMapGridInfo::InitAsDefaultInstance() {
}

AckBigMapGridInfo::AckBigMapGridInfo(const AckBigMapGridInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBigMapGridInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBigMapGridInfo::~AckBigMapGridInfo() {
  SharedDtor();
}

void AckBigMapGridInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBigMapGridInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBigMapGridInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBigMapGridInfo_descriptor_;
}

const AckBigMapGridInfo& AckBigMapGridInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

AckBigMapGridInfo* AckBigMapGridInfo::default_instance_ = NULL;

AckBigMapGridInfo* AckBigMapGridInfo::New() const {
  return new AckBigMapGridInfo;
}

void AckBigMapGridInfo::Clear() {
  map_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBigMapGridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.BigMapGridDetailInfo map_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBigMapGridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFMsg.BigMapGridDetailInfo map_data = 1;
  for (int i = 0; i < this->map_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBigMapGridInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFMsg.BigMapGridDetailInfo map_data = 1;
  for (int i = 0; i < this->map_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBigMapGridInfo::ByteSize() const {
  int total_size = 0;

  // repeated .NFMsg.BigMapGridDetailInfo map_data = 1;
  total_size += 1 * this->map_data_size();
  for (int i = 0; i < this->map_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBigMapGridInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBigMapGridInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBigMapGridInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBigMapGridInfo::MergeFrom(const AckBigMapGridInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_data_.MergeFrom(from.map_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBigMapGridInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBigMapGridInfo::CopyFrom(const AckBigMapGridInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBigMapGridInfo::IsInitialized() const {

  for (int i = 0; i < map_data_size(); i++) {
    if (!this->map_data(i).IsInitialized()) return false;
  }
  return true;
}

void AckBigMapGridInfo::Swap(AckBigMapGridInfo* other) {
  if (other != this) {
    map_data_.Swap(&other->map_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBigMapGridInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBigMapGridInfo_descriptor_;
  metadata.reflection = AckBigMapGridInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqBigMapInfo::ReqBigMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBigMapInfo::InitAsDefaultInstance() {
}

ReqBigMapInfo::ReqBigMapInfo(const ReqBigMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBigMapInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBigMapInfo::~ReqBigMapInfo() {
  SharedDtor();
}

void ReqBigMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBigMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBigMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBigMapInfo_descriptor_;
}

const ReqBigMapInfo& ReqBigMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

ReqBigMapInfo* ReqBigMapInfo::default_instance_ = NULL;

ReqBigMapInfo* ReqBigMapInfo::New() const {
  return new ReqBigMapInfo;
}

void ReqBigMapInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBigMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqBigMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBigMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBigMapInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBigMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBigMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBigMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBigMapInfo::MergeFrom(const ReqBigMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBigMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBigMapInfo::CopyFrom(const ReqBigMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBigMapInfo::IsInitialized() const {

  return true;
}

void ReqBigMapInfo::Swap(ReqBigMapInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBigMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBigMapInfo_descriptor_;
  metadata.reflection = ReqBigMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBigMapInfo::kGridBaseInfoFieldNumber;
#endif  // !_MSC_VER

AckBigMapInfo::AckBigMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBigMapInfo::InitAsDefaultInstance() {
}

AckBigMapInfo::AckBigMapInfo(const AckBigMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBigMapInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBigMapInfo::~AckBigMapInfo() {
  SharedDtor();
}

void AckBigMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBigMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBigMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBigMapInfo_descriptor_;
}

const AckBigMapInfo& AckBigMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

AckBigMapInfo* AckBigMapInfo::default_instance_ = NULL;

AckBigMapInfo* AckBigMapInfo::New() const {
  return new AckBigMapInfo;
}

void AckBigMapInfo::Clear() {
  grid_base_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBigMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grid_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grid_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_grid_base_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBigMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  for (int i = 0; i < this->grid_base_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grid_base_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBigMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  for (int i = 0; i < this->grid_base_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grid_base_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBigMapInfo::ByteSize() const {
  int total_size = 0;

  // repeated .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  total_size += 1 * this->grid_base_info_size();
  for (int i = 0; i < this->grid_base_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grid_base_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBigMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBigMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBigMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBigMapInfo::MergeFrom(const AckBigMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  grid_base_info_.MergeFrom(from.grid_base_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBigMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBigMapInfo::CopyFrom(const AckBigMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBigMapInfo::IsInitialized() const {

  for (int i = 0; i < grid_base_info_size(); i++) {
    if (!this->grid_base_info(i).IsInitialized()) return false;
  }
  return true;
}

void AckBigMapInfo::Swap(AckBigMapInfo* other) {
  if (other != this) {
    grid_base_info_.Swap(&other->grid_base_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBigMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBigMapInfo_descriptor_;
  metadata.reflection = AckBigMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqHoldMapGrid::kMapTitleIdFieldNumber;
const int ReqHoldMapGrid::kGuildIdFieldNumber;
#endif  // !_MSC_VER

ReqHoldMapGrid::ReqHoldMapGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqHoldMapGrid::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqHoldMapGrid::ReqHoldMapGrid(const ReqHoldMapGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqHoldMapGrid::SharedCtor() {
  _cached_size_ = 0;
  map_title_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHoldMapGrid::~ReqHoldMapGrid() {
  SharedDtor();
}

void ReqHoldMapGrid::SharedDtor() {
  if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
    delete map_title_id_;
  }
  if (this != default_instance_) {
    delete guild_id_;
  }
}

void ReqHoldMapGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHoldMapGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHoldMapGrid_descriptor_;
}

const ReqHoldMapGrid& ReqHoldMapGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

ReqHoldMapGrid* ReqHoldMapGrid::default_instance_ = NULL;

ReqHoldMapGrid* ReqHoldMapGrid::New() const {
  return new ReqHoldMapGrid;
}

void ReqHoldMapGrid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map_title_id()) {
      if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
        map_title_id_->clear();
      }
    }
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHoldMapGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_id;
        break;
      }

      // required .NFMsg.Ident guild_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqHoldMapGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->map_title_id(), output);
  }

  // required .NFMsg.Ident guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guild_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqHoldMapGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  // required .NFMsg.Ident guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guild_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqHoldMapGrid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes map_title_id = 1;
    if (has_map_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_title_id());
    }

    // required .NFMsg.Ident guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHoldMapGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHoldMapGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHoldMapGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHoldMapGrid::MergeFrom(const ReqHoldMapGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title_id()) {
      set_map_title_id(from.map_title_id());
    }
    if (from.has_guild_id()) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHoldMapGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHoldMapGrid::CopyFrom(const ReqHoldMapGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHoldMapGrid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_guild_id()) {
    if (!this->guild_id().IsInitialized()) return false;
  }
  return true;
}

void ReqHoldMapGrid::Swap(ReqHoldMapGrid* other) {
  if (other != this) {
    std::swap(map_title_id_, other->map_title_id_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHoldMapGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHoldMapGrid_descriptor_;
  metadata.reflection = ReqHoldMapGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AckHoldMapGrid::AckHoldMapGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckHoldMapGrid::InitAsDefaultInstance() {
}

AckHoldMapGrid::AckHoldMapGrid(const AckHoldMapGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckHoldMapGrid::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckHoldMapGrid::~AckHoldMapGrid() {
  SharedDtor();
}

void AckHoldMapGrid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckHoldMapGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckHoldMapGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckHoldMapGrid_descriptor_;
}

const AckHoldMapGrid& AckHoldMapGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

AckHoldMapGrid* AckHoldMapGrid::default_instance_ = NULL;

AckHoldMapGrid* AckHoldMapGrid::New() const {
  return new AckHoldMapGrid;
}

void AckHoldMapGrid::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckHoldMapGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AckHoldMapGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckHoldMapGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckHoldMapGrid::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckHoldMapGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckHoldMapGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckHoldMapGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckHoldMapGrid::MergeFrom(const AckHoldMapGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckHoldMapGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHoldMapGrid::CopyFrom(const AckHoldMapGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHoldMapGrid::IsInitialized() const {

  return true;
}

void AckHoldMapGrid::Swap(AckHoldMapGrid* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckHoldMapGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckHoldMapGrid_descriptor_;
  metadata.reflection = AckHoldMapGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLeaveMapMsg::kMapTitleIdFieldNumber;
const int ReqLeaveMapMsg::kLeaveMsgFieldNumber;
#endif  // !_MSC_VER

ReqLeaveMapMsg::ReqLeaveMapMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLeaveMapMsg::InitAsDefaultInstance() {
  leave_msg_ = const_cast< ::NFMsg::BigMapLeaveMsg*>(&::NFMsg::BigMapLeaveMsg::default_instance());
}

ReqLeaveMapMsg::ReqLeaveMapMsg(const ReqLeaveMapMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLeaveMapMsg::SharedCtor() {
  _cached_size_ = 0;
  map_title_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leave_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLeaveMapMsg::~ReqLeaveMapMsg() {
  SharedDtor();
}

void ReqLeaveMapMsg::SharedDtor() {
  if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
    delete map_title_id_;
  }
  if (this != default_instance_) {
    delete leave_msg_;
  }
}

void ReqLeaveMapMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLeaveMapMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLeaveMapMsg_descriptor_;
}

const ReqLeaveMapMsg& ReqLeaveMapMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

ReqLeaveMapMsg* ReqLeaveMapMsg::default_instance_ = NULL;

ReqLeaveMapMsg* ReqLeaveMapMsg::New() const {
  return new ReqLeaveMapMsg;
}

void ReqLeaveMapMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map_title_id()) {
      if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
        map_title_id_->clear();
      }
    }
    if (has_leave_msg()) {
      if (leave_msg_ != NULL) leave_msg_->::NFMsg::BigMapLeaveMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLeaveMapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leave_msg;
        break;
      }

      // required .NFMsg.BigMapLeaveMsg leave_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leave_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leave_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLeaveMapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->map_title_id(), output);
  }

  // required .NFMsg.BigMapLeaveMsg leave_msg = 2;
  if (has_leave_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leave_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLeaveMapMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  // required .NFMsg.BigMapLeaveMsg leave_msg = 2;
  if (has_leave_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leave_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLeaveMapMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes map_title_id = 1;
    if (has_map_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_title_id());
    }

    // required .NFMsg.BigMapLeaveMsg leave_msg = 2;
    if (has_leave_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leave_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLeaveMapMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLeaveMapMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLeaveMapMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLeaveMapMsg::MergeFrom(const ReqLeaveMapMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title_id()) {
      set_map_title_id(from.map_title_id());
    }
    if (from.has_leave_msg()) {
      mutable_leave_msg()->::NFMsg::BigMapLeaveMsg::MergeFrom(from.leave_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLeaveMapMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveMapMsg::CopyFrom(const ReqLeaveMapMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveMapMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_leave_msg()) {
    if (!this->leave_msg().IsInitialized()) return false;
  }
  return true;
}

void ReqLeaveMapMsg::Swap(ReqLeaveMapMsg* other) {
  if (other != this) {
    std::swap(map_title_id_, other->map_title_id_);
    std::swap(leave_msg_, other->leave_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLeaveMapMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLeaveMapMsg_descriptor_;
  metadata.reflection = ReqLeaveMapMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AckLeaveMapMsg::AckLeaveMapMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckLeaveMapMsg::InitAsDefaultInstance() {
}

AckLeaveMapMsg::AckLeaveMapMsg(const AckLeaveMapMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckLeaveMapMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLeaveMapMsg::~AckLeaveMapMsg() {
  SharedDtor();
}

void AckLeaveMapMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckLeaveMapMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLeaveMapMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLeaveMapMsg_descriptor_;
}

const AckLeaveMapMsg& AckLeaveMapMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

AckLeaveMapMsg* AckLeaveMapMsg::default_instance_ = NULL;

AckLeaveMapMsg* AckLeaveMapMsg::New() const {
  return new AckLeaveMapMsg;
}

void AckLeaveMapMsg::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLeaveMapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AckLeaveMapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckLeaveMapMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckLeaveMapMsg::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLeaveMapMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLeaveMapMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLeaveMapMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLeaveMapMsg::MergeFrom(const AckLeaveMapMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLeaveMapMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLeaveMapMsg::CopyFrom(const AckLeaveMapMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLeaveMapMsg::IsInitialized() const {

  return true;
}

void AckLeaveMapMsg::Swap(AckLeaveMapMsg* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLeaveMapMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLeaveMapMsg_descriptor_;
  metadata.reflection = AckLeaveMapMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetMapAward::kMapTitleIdFieldNumber;
#endif  // !_MSC_VER

ReqGetMapAward::ReqGetMapAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetMapAward::InitAsDefaultInstance() {
}

ReqGetMapAward::ReqGetMapAward(const ReqGetMapAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetMapAward::SharedCtor() {
  _cached_size_ = 0;
  map_title_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetMapAward::~ReqGetMapAward() {
  SharedDtor();
}

void ReqGetMapAward::SharedDtor() {
  if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
    delete map_title_id_;
  }
  if (this != default_instance_) {
  }
}

void ReqGetMapAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetMapAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetMapAward_descriptor_;
}

const ReqGetMapAward& ReqGetMapAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

ReqGetMapAward* ReqGetMapAward::default_instance_ = NULL;

ReqGetMapAward* ReqGetMapAward::New() const {
  return new ReqGetMapAward;
}

void ReqGetMapAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map_title_id()) {
      if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
        map_title_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetMapAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetMapAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->map_title_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetMapAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetMapAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes map_title_id = 1;
    if (has_map_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_title_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetMapAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetMapAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetMapAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetMapAward::MergeFrom(const ReqGetMapAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title_id()) {
      set_map_title_id(from.map_title_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetMapAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetMapAward::CopyFrom(const ReqGetMapAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetMapAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGetMapAward::Swap(ReqGetMapAward* other) {
  if (other != this) {
    std::swap(map_title_id_, other->map_title_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetMapAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetMapAward_descriptor_;
  metadata.reflection = ReqGetMapAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AckGetMapAward::AckGetMapAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGetMapAward::InitAsDefaultInstance() {
}

AckGetMapAward::AckGetMapAward(const AckGetMapAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGetMapAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGetMapAward::~AckGetMapAward() {
  SharedDtor();
}

void AckGetMapAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGetMapAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGetMapAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGetMapAward_descriptor_;
}

const AckGetMapAward& AckGetMapAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

AckGetMapAward* AckGetMapAward::default_instance_ = NULL;

AckGetMapAward* AckGetMapAward::New() const {
  return new AckGetMapAward;
}

void AckGetMapAward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGetMapAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AckGetMapAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGetMapAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGetMapAward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGetMapAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGetMapAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGetMapAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGetMapAward::MergeFrom(const AckGetMapAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGetMapAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetMapAward::CopyFrom(const AckGetMapAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetMapAward::IsInitialized() const {

  return true;
}

void AckGetMapAward::Swap(AckGetMapAward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGetMapAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGetMapAward_descriptor_;
  metadata.reflection = AckGetMapAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMapHunting::kMapTitleIdFieldNumber;
#endif  // !_MSC_VER

ReqMapHunting::ReqMapHunting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqMapHunting::InitAsDefaultInstance() {
}

ReqMapHunting::ReqMapHunting(const ReqMapHunting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqMapHunting::SharedCtor() {
  _cached_size_ = 0;
  map_title_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMapHunting::~ReqMapHunting() {
  SharedDtor();
}

void ReqMapHunting::SharedDtor() {
  if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
    delete map_title_id_;
  }
  if (this != default_instance_) {
  }
}

void ReqMapHunting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMapHunting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMapHunting_descriptor_;
}

const ReqMapHunting& ReqMapHunting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

ReqMapHunting* ReqMapHunting::default_instance_ = NULL;

ReqMapHunting* ReqMapHunting::New() const {
  return new ReqMapHunting;
}

void ReqMapHunting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map_title_id()) {
      if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
        map_title_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMapHunting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqMapHunting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->map_title_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqMapHunting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqMapHunting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes map_title_id = 1;
    if (has_map_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_title_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMapHunting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMapHunting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMapHunting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMapHunting::MergeFrom(const ReqMapHunting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title_id()) {
      set_map_title_id(from.map_title_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMapHunting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMapHunting::CopyFrom(const ReqMapHunting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMapHunting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqMapHunting::Swap(ReqMapHunting* other) {
  if (other != this) {
    std::swap(map_title_id_, other->map_title_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMapHunting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMapHunting_descriptor_;
  metadata.reflection = ReqMapHunting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AckMapHunting::AckMapHunting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckMapHunting::InitAsDefaultInstance() {
}

AckMapHunting::AckMapHunting(const AckMapHunting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckMapHunting::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckMapHunting::~AckMapHunting() {
  SharedDtor();
}

void AckMapHunting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckMapHunting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckMapHunting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckMapHunting_descriptor_;
}

const AckMapHunting& AckMapHunting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

AckMapHunting* AckMapHunting::default_instance_ = NULL;

AckMapHunting* AckMapHunting::New() const {
  return new AckMapHunting;
}

void AckMapHunting::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckMapHunting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AckMapHunting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckMapHunting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckMapHunting::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckMapHunting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckMapHunting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckMapHunting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckMapHunting::MergeFrom(const AckMapHunting& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckMapHunting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMapHunting::CopyFrom(const AckMapHunting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMapHunting::IsInitialized() const {

  return true;
}

void AckMapHunting::Swap(AckMapHunting* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckMapHunting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckMapHunting_descriptor_;
  metadata.reflection = AckMapHunting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMapKingWar::kMapTitleFieldNumber;
#endif  // !_MSC_VER

ReqMapKingWar::ReqMapKingWar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqMapKingWar::InitAsDefaultInstance() {
}

ReqMapKingWar::ReqMapKingWar(const ReqMapKingWar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqMapKingWar::SharedCtor() {
  _cached_size_ = 0;
  map_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMapKingWar::~ReqMapKingWar() {
  SharedDtor();
}

void ReqMapKingWar::SharedDtor() {
  if (map_title_ != &::google::protobuf::internal::kEmptyString) {
    delete map_title_;
  }
  if (this != default_instance_) {
  }
}

void ReqMapKingWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMapKingWar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMapKingWar_descriptor_;
}

const ReqMapKingWar& ReqMapKingWar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

ReqMapKingWar* ReqMapKingWar::default_instance_ = NULL;

ReqMapKingWar* ReqMapKingWar::New() const {
  return new ReqMapKingWar;
}

void ReqMapKingWar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map_title()) {
      if (map_title_ != &::google::protobuf::internal::kEmptyString) {
        map_title_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMapKingWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqMapKingWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes map_title = 1;
  if (has_map_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->map_title(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqMapKingWar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes map_title = 1;
  if (has_map_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqMapKingWar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes map_title = 1;
    if (has_map_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_title());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMapKingWar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMapKingWar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMapKingWar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMapKingWar::MergeFrom(const ReqMapKingWar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title()) {
      set_map_title(from.map_title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMapKingWar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMapKingWar::CopyFrom(const ReqMapKingWar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMapKingWar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqMapKingWar::Swap(ReqMapKingWar* other) {
  if (other != this) {
    std::swap(map_title_, other->map_title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMapKingWar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMapKingWar_descriptor_;
  metadata.reflection = ReqMapKingWar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckMapKingWar::kMapTitleFieldNumber;
#endif  // !_MSC_VER

AckMapKingWar::AckMapKingWar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckMapKingWar::InitAsDefaultInstance() {
}

AckMapKingWar::AckMapKingWar(const AckMapKingWar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckMapKingWar::SharedCtor() {
  _cached_size_ = 0;
  map_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckMapKingWar::~AckMapKingWar() {
  SharedDtor();
}

void AckMapKingWar::SharedDtor() {
  if (map_title_ != &::google::protobuf::internal::kEmptyString) {
    delete map_title_;
  }
  if (this != default_instance_) {
  }
}

void AckMapKingWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckMapKingWar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckMapKingWar_descriptor_;
}

const AckMapKingWar& AckMapKingWar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgExtra_2eproto();
  return *default_instance_;
}

AckMapKingWar* AckMapKingWar::default_instance_ = NULL;

AckMapKingWar* AckMapKingWar::New() const {
  return new AckMapKingWar;
}

void AckMapKingWar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map_title()) {
      if (map_title_ != &::google::protobuf::internal::kEmptyString) {
        map_title_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckMapKingWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckMapKingWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes map_title = 1;
  if (has_map_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->map_title(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckMapKingWar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes map_title = 1;
  if (has_map_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckMapKingWar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes map_title = 1;
    if (has_map_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_title());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckMapKingWar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckMapKingWar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckMapKingWar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckMapKingWar::MergeFrom(const AckMapKingWar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title()) {
      set_map_title(from.map_title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckMapKingWar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMapKingWar::CopyFrom(const AckMapKingWar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMapKingWar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckMapKingWar::Swap(AckMapKingWar* other) {
  if (other != this) {
    std::swap(map_title_, other->map_title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckMapKingWar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckMapKingWar_descriptor_;
  metadata.reflection = AckMapKingWar_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)
